// logic

finish [ /* some */
  ( 0.type <string qwItem> : 0.string > 0.result )
  ( 0.type "number" : 0.string | ParseNumber > 0.result )
  ( 0.type "word" :
    [
      ( 0.string "true" : true > 0.result )
      ( 0.string "false" : false > 0.result )
      ( 0.string <nil null> )
      ( 0.string <Bool String Int Number Map Array ArrayOf> : 0.string > 0.result )
      ( 0.string "qw" :
        PullRune
        [
          ( OpenBraces Punct Symbol:
            "expectSpaceOrQwItemOrDelimiter" > primary
            "" > secondary
            "qw" > 0.type
            Array > 0.result
            rune | PairBrace > 0.delimiter
          )
          (: UnexpectedRune )
        ]
        true > skipPostProcess
      )
      (: UnexpectedItem )
    ]
  )
]

postProcess [
  (stackLen 0)
  (stackLen 1: "end" > primary "orSpace" > secondary)
  (:
    [
      (1.type "qw" :
        0.result >> 1.result
        "expectSpaceOrQwItemOrDelimiter" > primary
        "" > secondary
      )
      (1.type "array" :
        [
          ( 0.type "qw": 0.result >>> 1.result )
          ( : 0.result >> 1.result )
        ]
        "begin" > primary "orArrayItemSeparator" > secondary
      )
      (1.type "map":
        [
          ( 0.type "key":
            0.string > 1.key
            "begin" > primary "orMapKeySeparator" > secondary
          )
          (:
            0.result > 1.result.{1.key}
            "expectSpaceOrMapKey" > primary "orMapValueSeparator" > secondary
          )
        ]
      )
      (: UnexpectedItem )
    ]
  )
]

primaryState [
  (primary "end": [
    (EOF: "end" > primary "" > secondary)
    (Space)
    (:UnexpectedRune)
  ])
  (primary "expectRocket": [
     ('>': "begin" > primary "" > secondary )
     (:UnexpectedRune)
  ])
  (primary "expectWord": [
    (Letter Digit: rune >> 0.string )
    (: PushRune true > needFinish)
  ])
  (primary "expectSpaceOrQwItemOrDelimiter": [
    (EOF: UnexpectedRune)
    (Space)
    (rune 0.delimiter: true > needFinish)
    (:
      PushItem
      "qwItem" > 0.type
      1.delimiter > 0.delimiter
      rune >> 0.string
      "expectEndOfQwItem" > primary "" > secondary
    )
  ])
  (primary "expectEndOfQwItem": [
    (EOF: UnexpectedRune)
    (Space rune 0.delimiter: PushRune true > needFinish)
    (: rune >> 0.string )
  ])
  (primary "expectContentOf": [
    (EOF: UnexpectedRune)
    (rune 0.delimiter: true > needFinish)
    ('\\': "expectEscapedContentOf" > primary)
    (: rune >> 0.string )
  ])
  (primary "expectDigit": [
    (Digit secondary "":
      rune >> 0.string
      "orUnderscoreOrDot" > secondary
    )
    ('.' secondary "orUnderscoreOrDot"}:
      rune >> 0.string
      "orUnderscore" > secondary
    )
    ('_' unicodeDigit secondary ["orUnderscoreOrDot" "orUnderscore"]:
      rune >> 0.string
    )
    ( secondary "": UnexpectedRune )
    (: PushRune true > needFinish )
  ])
  (primary "expectSpaceOrMapKey": [
    (Space)
    (Letter:
      PushItem
      "key" > 0.type
      rune >> 0.string
      "expectWord" > primary "" > secondary
    )
    ( '"', '\'':
      PushItem
      "key" > 0.type
      "" > 0.string
      rune > 0.delimiter
      "expectContentOf" > primary "keyToken" > secondary
    )
    ( rune 0.delimiter 0.type "map": true > needFinish )
  ])
  (primary "expectEscapedContentOf": [
    ('"' '\'' '\\':
      rune >> 0.string "expectContentOf" > primary
    )
    (0.delimiter '"': [
      ('a' 'b' 'f' 'n' 'r' 't' 'v': rune | Escape > 0.string )
      (: UnexpectedRune)
    ])
  ])
  (primary "begin": [
    (EOF stackLen 0: "end" > primary "" > secondary)
    (EOF: UnexpectedRune)
    ('=' secondary "orMapKeySeparator":
      "expectRocket" > primary "" > secondary
    )
    (':' secondary "orMapKeySeparator":
      "begin" > primary "" > secondary
    )
    (Space)
    ('{':
      PushItem
      Map > 0.result
      "map" > 0.type
      '}' > 0.delimiter
      "expectSpaceOrMapKey" > primary "" > secondary
    )
    ('<':
      PushItem
      Array > 0.result
      "qw" > 0.type
      '>' > 0.delimiter
      "expectSpaceOrQwItemOrDelimiter" > primary "" > secondary
    )
    ('[':
      PushItem
      Array > 0.result
      "array" > 0.type
      ']' > 0.delimiter
      "begin" > primary "" > secondary
    )
    ( 0.type "array" rune 0.delimiter: true > needFinish )
    ('-' '+':
      PushItem
      "number" > 0.type
      rune >> 0.string
      "expectDigit" > primary "" > secondary
    )
    (Digit:
      PushItem
      "number" > 0.type
      rune >> 0.string
      "expectDigit" > primary "orUnderscoreOrDot" > secondary
    )
    ('"', '\'':
      PushItem
      "string" > 0.type
      "" > 0.string
      rune > 0.delimiter
      "expectContentOf" > primary "stringToken" > secondary
    )
    (Letter:
      PushItem
      "word" > 0.type
      rune >> 0.string
      "expectWord" > primary "" > secondary
    )
    (:UnexpectedRune)
  ])
  (:Unexpected)
]

main [
  (:
    PullRune
    [(primary nil: "begin" > primary)]
    false > needFinish
    [ $primaryState ]
    [(needFinish true:
      false > skipPostProcess
      [ $finish ]
      [(skipPostProcess false: [$postProcess])]
    )]
  )
]
