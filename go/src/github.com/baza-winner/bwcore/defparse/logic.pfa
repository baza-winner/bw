// logic
unexpectedEOF (IsEOF SetError{UnexpectedRune} )

unexpectedRune (SetError{UnexpectedRune})

finish [ /* some */
  (TopItemIs{string qwItem} SetTopItemValueAsString )
  (TopItemIs{map} SetTopItemValueAsMap )
  (TopItemIs{array qw} SetTopItemValueAsMap )
  (TopItemIs{number} SetTopItemValueAsNumber )
  (TopItemIs{word}
    [
      (TopItemStringIs{true}
        SetTopItemValueAsBool{false}
      )
      (TopItemStringIs{nil null})
      (TopItemStringIs{//
        Bool String Int Number Map Array /* */ ArrayOf
      }
        SetTopItemValueAsString
      )
      (TopItemStringIs{qw}
        PullRune
        [
          (Unicode{OpenBraces Punct Symbol}
            SetState{//
              expectSpaceOrQwItemOrDelimiter//
            }
            SetTopItemDelimiter{PairForCurrRune}
            SetTopItemType{ qw }
          )
          unexpectedRune
        ]
        SetVar{//
          skipPostProcess /*some */ true//
        }
      )
      (SetError{UnexpectedItem})
    ]
  )
]

postProcess [
  (StackLenIs{0})
  (StackLenIs{1}
    SetState{end orSpace}
  )
  (
    PopItem
    [
      (TopItemIs{qw}
        AppendItemArray{FromSubItemValue}
        SetState{expectSpaceOrQwItemOrDelimiter}
      )
      (TopItemIs{array}
        [
          (SubItemIs{qw}
            AppendItemArray{FromSubItemArray}
          )
          (AppendItemArray{FromSubItemValue})
        ]
        SetState{begin orArrayItemSeparator}
      )
      (TopItemIs{map}
        [
          (SubItemIs{key}
            SetTopItemStringFromSubItem
            SetState{begin orMapKeySeparator}
          )
          (
            SetTopItemMapKeyValueFromSubItem
            SetState{expectSpaceOrMapKey orMapValueSeparator}
          )
        ]
      )
      (Unreachable)
    ]
  )
]

primaryState = [
  (PrimaryIs{end}
    [
      (IsEOF SetState{end})
      (Unicode{Space})
      unexpectedRune
    ]
  )
  (PrimaryIs{expectRocket}
    [
      ('>' SetState{begin})
      unexpectedRune
    ]
  )
  (PrimaryIs{expectWord}
    [
      (Unicode{Letter Digit} AppendCurrRune)
      (PushRune SetVar{needFinish true})
    ]
  )
  (PrimaryIs{expectSpaceOrQwItemOrDelimiter}
    [
      unexpectedEOF
      (Unicode{Space})
      (IsDelimiterRune SetVar{needFinish true})
      (
        PushItem{
          ItemType qwItem
          ItemString FromCurrRune
          Delimiter FromParentItem
        }
        SetState{expectEndOfQwItem}
      )
    ]
  )
  (PrimaryIs{expectEndOfQwItem}
    [
      unexpectedEOF
      (Unicode{Space} IsDelimiterRune
        PushRune
        SetVar{needFinish true}
      )
      (AppendCurrRune)
    ]
  )
  (PrimaryIs{expectContentOf}
    [
      unexpectedEOF
      (IsDelimiterRune
        SetVar{needFinish true}
      )
      ('\\'
        SetPrimary{expectEscapedContentOf}
      )
      (AppendCurrRune)
    ]
  )
  (PrimaryIs{expectDigit}
    [
      (Unicode{Digit} SecondaryIs{""}
        AppendCurrRune
        SetSecondary{orUnderscoreOrDot}
      )
      ('.' SecondaryIs{orUnderscoreOrDot}
        AppendCurrRune
        SetSecondary{orUnderscore}
      )
      ('_' Unicode{Digit} SecondaryIs{orUnderscoreOrDot orUnderscore}
        AppendCurrRune
      )
      (SecondaryIs{""} SetError{UnexpectedRune})
      (
        PushRune
        SetVar{needFinish true}
      )
    ]
  )
  (PrimaryIs{expectSpaceOrMapKey}
    [
      (Unicode{Space})
      (Unicode{Letter}
        PushItem{ItemType key ItemString FromCurrRune}
        SetState{expectWord}
      )
      ('"' '\''
        PushItem{ItemType key Delimiter FromCurrRune}
        SetState{expectContentOf keyToken}
      )
      (',' SecondaryIs{orMapValueSeparator}
        SetState{expectSpaceOrMapKey}
      )
      (IsDelimiterRune TopItemIs{map}
        SetVar{needFinish true}
      )
      unexpectedRune
    ]
  )
  (PrimaryIs{expectEscapedContentOf}
    [
      ('"' '\'' '\\'
        AppendCurrRune
        SetPrimary{expectContentOf}
      )
      (DelimiterIs{'"'}
        [
          ('a' AppendRune{'\a'})
          ('b' AppendRune{'\b'})
          ('f' AppendRune{'\f'})
          ('n' AppendRune{'\n'})
          ('r' AppendRune{'\r'})
          ('t' AppendRune{'\t'})
          ('v' AppendRune{'\v'})
          unexpectedRune
        ]
        SetPrimary{expectContentOf}
      )
      unexpectedRune
    ]
  )
  (PrimaryIs{begin}
    [
      (IsEOF StackLenIs{0}
        SetState{end}
      )
      unexpectedEOF
      ('=' SecondaryIs{orMapKeySeparator}
        SetState{expectRocket}
      )
      (':' SecondaryIs{orMapKeySeparator}
        SetState{begin}
      )
      (',' SecondaryIs{orArrayItemSeparator}
        SetState{begin}
      )
      (Unicode{Space})
      ('{'
        PushItem{
          ItemType map
          Delimiter PairForCurrRune
      }
        SetState{expectSpaceOrMapKey}
      )
      ('<'
        PushItem{ItemType qw Delimiter PairForCurrRune}
        SetState{expectSpaceOrQwItemOrDelimiter}
      )
      ('['
        PushItem{ItemType array Delimiter PairForCurrRune}
        SetState{begin}
      )
      (TopItemIs{array} IsDelimiterRune
        SetVar{needFinish true}
      )
      ('-' '+'
        PushItem{ItemType number ItemString FromCurrRune}
        SetState{expectDigit}
      )
      (Unicode{Digit}
        PushItem{ItemType number ItemString FromCurrRune}
        SetState{expectDigit orUnderscoreOrDot}
      )
      ('"' '\''
        PushItem{ItemType string Delimiter FromCurrRune}
        SetState{expectContentOf stringToken}
      )
      (Unicode{Letter}
        PushItem{ItemType word ItemString FromCurrRune}
        SetState{expectWord}
      )
      unexpectedRune
    ]
  )
  (PrimaryIs{begin}
    Unreachable
  )
]

main [
  (
    PullRune
    SetVar{"needFinish" false}
    primaryStateLogic
    [
      (VarIs{"needFinish" true}
        SetVar{"skipPostProcess" false}
        finishLogic
        [
          (VarIs{"skipPostProcess" false}
            postProcessLogic
          )
        ]
      )
    ]
  )
]

