// Code generated by "setter -type=parseSecondaryState"; DO NOT EDIT github.com/baza-winner/bwcore/setter

package defparse

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	"sort"
)

type parseSecondaryStateSet map[parseSecondaryState]struct{}

func parseSecondaryStateSetFromArgs(kk ...parseSecondaryState) parseSecondaryStateSet {
	return parseSecondaryStateSetFromSlice(kk)
}

func parseSecondaryStateSetFromSlice(kk []parseSecondaryState) parseSecondaryStateSet {
	result := parseSecondaryStateSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

func (v parseSecondaryStateSet) Copy() parseSecondaryStateSet {
	return parseSecondaryStateSetFromSlice(v.ToSlice())
}

func (v parseSecondaryStateSet) ToSlice() []parseSecondaryState {
	result := _parseSecondaryStateSlice{}
	for k, _ := range v {
		result = append(result, k)
	}
	sort.Sort(result)
	return result
}

func (v parseSecondaryStateSet) String() string {
	return bwjson.PrettyJsonOf(v)
}

func (v parseSecondaryStateSet) GetDataForJson() interface{} {
	result := []interface{}{}
	for _, k := range v.ToSlice() {
		result = append(result, k.String())
	}
	return result
}

func (v parseSecondaryStateSet) ToSliceOfStrings() (result []string) {
	result = []string{}
	for k, _ := range v {
		result = append(result, k.String())
	}
	sort.Strings(result)
	return result
}

func (v parseSecondaryStateSet) ContainesEach(s parseSecondaryStateSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

func (v parseSecondaryStateSet) ContainsAny(s parseSecondaryStateSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

func (v parseSecondaryStateSet) Union(s parseSecondaryStateSet) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

func (v parseSecondaryStateSet) Intersect(s parseSecondaryStateSet) {
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			delete(v, k)
		}
	}
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			delete(v, k)
		}
	}
}

func (v parseSecondaryStateSet) Subtract(s parseSecondaryStateSet) {
	for k, _ := range v {
		if _, ok := s[k]; ok {
			delete(v, k)
		}
	}
}

func _parseSecondaryStateSetUnion(s1 parseSecondaryStateSet, s2 parseSecondaryStateSet) parseSecondaryStateSet {
	s1.Union(s2)
	return s1
}

func _parseSecondaryStateSetIntersect(s1 parseSecondaryStateSet, s2 parseSecondaryStateSet) parseSecondaryStateSet {
	s1.Intersect(s2)
	return s1
}

func _parseSecondaryStateSetSubtract(s1 parseSecondaryStateSet, s2 parseSecondaryStateSet) parseSecondaryStateSet {
	s1.Subtract(s2)
	return s1
}

type _parseSecondaryStateSlice []parseSecondaryState

func (v _parseSecondaryStateSlice) Len() int {
	return len(v)
}

func (v _parseSecondaryStateSlice) Swap(i int, j int) {
	v[i], v[j] = v[j], v[i]
}

func (v _parseSecondaryStateSlice) Less(i int, j int) bool {
	return v[i] < v[j]
}
