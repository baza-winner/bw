// Code generated by "setter -type=parseSecondaryState"; DO NOT EDIT; setter: go get github.com/baza-winner/bwcore/setter

package defparse

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	"sort"
)

// parseSecondaryStateSet - множество значений типа parseSecondaryState с поддержкой интерфейсов Stringer и github.com/baza-winner/bwcore/bwjson.Jsonable
type parseSecondaryStateSet map[parseSecondaryState]struct{}

// parseSecondaryStateSetFrom - конструктор parseSecondaryStateSet
func parseSecondaryStateSetFrom(kk ...parseSecondaryState) parseSecondaryStateSet {
	result := parseSecondaryStateSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// parseSecondaryStateSetFromSlice - конструктор parseSecondaryStateSet
func parseSecondaryStateSetFromSlice(kk []parseSecondaryState) parseSecondaryStateSet {
	result := parseSecondaryStateSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// parseSecondaryStateSetFromSet - конструктор parseSecondaryStateSet
func parseSecondaryStateSetFromSet(s parseSecondaryStateSet) parseSecondaryStateSet {
	result := parseSecondaryStateSet{}
	for k, _ := range s {
		result[k] = struct{}{}
	}
	return result
}

// Copy - создает независимую копию
func (v parseSecondaryStateSet) Copy() parseSecondaryStateSet {
	return parseSecondaryStateSetFromSet(v)
}

// ToSlice - возвращает в виде []parseSecondaryState
func (v parseSecondaryStateSet) ToSlice() []parseSecondaryState {
	result := _parseSecondaryStateSlice{}
	for k, _ := range v {
		result = append(result, k)
	}
	sort.Sort(result)
	return result
}

func _parseSecondaryStateSetToSliceTestHelper(kk []parseSecondaryState) []parseSecondaryState {
	return parseSecondaryStateSetFromSlice(kk).ToSlice()
}

// String - поддержка интерфейса Stringer
func (v parseSecondaryStateSet) String() string {
	return bwjson.PrettyJsonOf(v)
}

// GetDataForJson - поддержка интерфейса bwjson.Jsonable
func (v parseSecondaryStateSet) GetDataForJson() interface{} {
	result := []interface{}{}
	for k, _ := range v {
		result = append(result, k.String())
	}
	return result
}

// ToSliceOfStrings - возвращает []string строковых представлений элементов множества
func (v parseSecondaryStateSet) ToSliceOfStrings() []string {
	result := []string{}
	for k, _ := range v {
		result = append(result, k.String())
	}
	sort.Strings(result)
	return result
}

// Has - возвращает true, если множество содержит заданный элемент, в противном случае - false
func (v parseSecondaryStateSet) Has(k parseSecondaryState) bool {
	_, ok := v[k]
	return ok
}

/*
HasAny - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v parseSecondaryStateSet) HasAny(kk ...parseSecondaryState) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSlice - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v parseSecondaryStateSet) HasAnyOfSlice(kk []parseSecondaryState) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSet - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v parseSecondaryStateSet) HasAnyOfSet(s parseSecondaryStateSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasEach - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v parseSecondaryStateSet) HasEach(kk ...parseSecondaryState) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSlice - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v parseSecondaryStateSet) HasEachOfSlice(kk []parseSecondaryState) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSet - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v parseSecondaryStateSet) HasEachOfSet(s parseSecondaryStateSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

// Add - добавляет элементы в множество v
func (v parseSecondaryStateSet) Add(kk ...parseSecondaryState) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

// AddSlice - добавляет элементы в множество v
func (v parseSecondaryStateSet) AddSlice(kk []parseSecondaryState) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

// AddSet - добавляет элементы в множество v
func (v parseSecondaryStateSet) AddSet(s parseSecondaryStateSet) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

// Del - удаляет элементы из множествa v
func (v parseSecondaryStateSet) Del(kk ...parseSecondaryState) {
	for _, k := range kk {
		delete(v, k)
	}
}

// DelSlice - удаляет элементы из множествa v
func (v parseSecondaryStateSet) DelSlice(kk []parseSecondaryState) {
	for _, k := range kk {
		delete(v, k)
	}
}

// DelSet - удаляет элементы из множествa v
func (v parseSecondaryStateSet) DelSet(s parseSecondaryStateSet) {
	for k, _ := range s {
		delete(v, k)
	}
}

// Union - возвращает результат объединения двух множеств. Исходные множества остаются без изменений
func (v parseSecondaryStateSet) Union(s parseSecondaryStateSet) parseSecondaryStateSet {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Intersect - возвращает результат пересечения двух множеств. Исходные множества остаются без изменений
func (v parseSecondaryStateSet) Intersect(s parseSecondaryStateSet) parseSecondaryStateSet {
	result := parseSecondaryStateSet{}
	for k, _ := range v {
		if _, ok := s[k]; ok {
			result[k] = struct{}{}
		}
	}
	return result
}

// Subtract - возвращает результат вычитания двух множеств. Исходные множества остаются без изменений
func (v parseSecondaryStateSet) Subtract(s parseSecondaryStateSet) parseSecondaryStateSet {
	result := parseSecondaryStateSet{}
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			result[k] = struct{}{}
		}
	}
	return result
}

type _parseSecondaryStateSlice []parseSecondaryState

func (v _parseSecondaryStateSlice) Len() int {
	return len(v)
}

func (v _parseSecondaryStateSlice) Swap(i int, j int) {
	v[i], v[j] = v[j], v[i]
}

func (v _parseSecondaryStateSlice) Less(i int, j int) bool {
	return v[i] < v[j]
}
