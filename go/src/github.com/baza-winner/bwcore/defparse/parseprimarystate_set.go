// Code generated by "bwsetter -type=parsePrimaryState"; DO NOT EDIT; bwsetter: go get -type=parsePrimaryState%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package defparse

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	"sort"
)

// parsePrimaryStateSet - множество значений типа parsePrimaryState с поддержкой интерфейсов Stringer и github.com/baza-winner/bwcore/bwjson.Jsonable
type parsePrimaryStateSet map[parsePrimaryState]struct{}

// parsePrimaryStateSetFrom - конструктор parsePrimaryStateSet
func parsePrimaryStateSetFrom(kk ...parsePrimaryState) parsePrimaryStateSet {
	result := parsePrimaryStateSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// parsePrimaryStateSetFromSlice - конструктор parsePrimaryStateSet
func parsePrimaryStateSetFromSlice(kk []parsePrimaryState) parsePrimaryStateSet {
	result := parsePrimaryStateSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// parsePrimaryStateSetFromSet - конструктор parsePrimaryStateSet
func parsePrimaryStateSetFromSet(s parsePrimaryStateSet) parsePrimaryStateSet {
	result := parsePrimaryStateSet{}
	for k, _ := range s {
		result[k] = struct{}{}
	}
	return result
}

// Copy - создает независимую копию
func (v parsePrimaryStateSet) Copy() parsePrimaryStateSet {
	return parsePrimaryStateSetFromSet(v)
}

// ToSlice - возвращает в виде []parsePrimaryState
func (v parsePrimaryStateSet) ToSlice() []parsePrimaryState {
	result := _parsePrimaryStateSlice{}
	for k, _ := range v {
		result = append(result, k)
	}
	sort.Sort(result)
	return result
}

func _parsePrimaryStateSetToSliceTestHelper(kk []parsePrimaryState) []parsePrimaryState {
	return parsePrimaryStateSetFromSlice(kk).ToSlice()
}

// String - поддержка интерфейса Stringer
func (v parsePrimaryStateSet) String() string {
	return bwjson.PrettyJsonOf(v)
}

// DataForJson - поддержка интерфейса bwjson.Jsonable
func (v parsePrimaryStateSet) DataForJson() interface{} {
	result := []interface{}{}
	for k, _ := range v {
		result = append(result, k.DataForJson())
	}
	return result
}

// ToSliceOfStrings - возвращает []string строковых представлений элементов множества
func (v parsePrimaryStateSet) ToSliceOfStrings() []string {
	result := []string{}
	for k, _ := range v {
		result = append(result, k.String())
	}
	sort.Strings(result)
	return result
}

// Has - возвращает true, если множество содержит заданный элемент, в противном случае - false
func (v parsePrimaryStateSet) Has(k parsePrimaryState) bool {
	_, ok := v[k]
	return ok
}

/*
HasAny - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v parsePrimaryStateSet) HasAny(kk ...parsePrimaryState) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSlice - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v parsePrimaryStateSet) HasAnyOfSlice(kk []parsePrimaryState) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSet - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v parsePrimaryStateSet) HasAnyOfSet(s parsePrimaryStateSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasEach - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v parsePrimaryStateSet) HasEach(kk ...parsePrimaryState) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSlice - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v parsePrimaryStateSet) HasEachOfSlice(kk []parsePrimaryState) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSet - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v parsePrimaryStateSet) HasEachOfSet(s parsePrimaryStateSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

// Add - добавляет элементы в множество v
func (v parsePrimaryStateSet) Add(kk ...parsePrimaryState) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

// AddSlice - добавляет элементы в множество v
func (v parsePrimaryStateSet) AddSlice(kk []parsePrimaryState) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

// AddSet - добавляет элементы в множество v
func (v parsePrimaryStateSet) AddSet(s parsePrimaryStateSet) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

// Del - удаляет элементы из множествa v
func (v parsePrimaryStateSet) Del(kk ...parsePrimaryState) {
	for _, k := range kk {
		delete(v, k)
	}
}

// DelSlice - удаляет элементы из множествa v
func (v parsePrimaryStateSet) DelSlice(kk []parsePrimaryState) {
	for _, k := range kk {
		delete(v, k)
	}
}

// DelSet - удаляет элементы из множествa v
func (v parsePrimaryStateSet) DelSet(s parsePrimaryStateSet) {
	for k, _ := range s {
		delete(v, k)
	}
}

// Union - возвращает результат объединения двух множеств. Исходные множества остаются без изменений
func (v parsePrimaryStateSet) Union(s parsePrimaryStateSet) parsePrimaryStateSet {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Intersect - возвращает результат пересечения двух множеств. Исходные множества остаются без изменений
func (v parsePrimaryStateSet) Intersect(s parsePrimaryStateSet) parsePrimaryStateSet {
	result := parsePrimaryStateSet{}
	for k, _ := range v {
		if _, ok := s[k]; ok {
			result[k] = struct{}{}
		}
	}
	return result
}

// Subtract - возвращает результат вычитания двух множеств. Исходные множества остаются без изменений
func (v parsePrimaryStateSet) Subtract(s parsePrimaryStateSet) parsePrimaryStateSet {
	result := parsePrimaryStateSet{}
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			result[k] = struct{}{}
		}
	}
	return result
}

type _parsePrimaryStateSlice []parsePrimaryState

func (v _parsePrimaryStateSlice) Len() int {
	return len(v)
}

func (v _parsePrimaryStateSlice) Swap(i int, j int) {
	v[i], v[j] = v[j], v[i]
}

func (v _parsePrimaryStateSlice) Less(i int, j int) bool {
	return v[i] < v[j]
}
