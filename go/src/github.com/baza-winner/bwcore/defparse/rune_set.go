// Code generated by "setter -type=rune"; DO NOT EDIT github.com/baza-winner/bwcore/setter

package defparse

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	"sort"
)

type runeSet map[rune]struct{}

func runeSetFromArgs(kk ...rune) runeSet {
	return runeSetFromSlice(kk)
}

func runeSetFromSlice(kk []rune) runeSet {
	result := runeSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

func (v runeSet) Copy() runeSet {
	return runeSetFromSlice(v.ToSlice())
}

func (v runeSet) ToSlice() []rune {
	result := _runeSlice{}
	for k, _ := range v {
		result = append(result, k)
	}
	sort.Sort(result)
	return result
}

func (v runeSet) String() string {
	return bwjson.PrettyJsonOf(v)
}

func (v runeSet) GetDataForJson() interface{} {
	result := []interface{}{}
	for _, k := range v.ToSlice() {
		result = append(result, string(k))
	}
	return result
}

func (v runeSet) ToSliceOfStrings() (result []string) {
	result = []string{}
	for k, _ := range v {
		result = append(result, string(k))
	}
	sort.Strings(result)
	return result
}

func (v runeSet) ContainesEach(s runeSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

func (v runeSet) ContainsAny(s runeSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

func (v runeSet) Union(s runeSet) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

func (v runeSet) Intersect(s runeSet) {
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			delete(v, k)
		}
	}
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			delete(v, k)
		}
	}
}

func (v runeSet) Subtract(s runeSet) {
	for k, _ := range v {
		if _, ok := s[k]; ok {
			delete(v, k)
		}
	}
}

func _runeSetUnion(s1 runeSet, s2 runeSet) runeSet {
	s1.Union(s2)
	return s1
}

func _runeSetIntersect(s1 runeSet, s2 runeSet) runeSet {
	s1.Intersect(s2)
	return s1
}

func _runeSetSubtract(s1 runeSet, s2 runeSet) runeSet {
	s1.Subtract(s2)
	return s1
}

type _runeSlice []rune

func (v _runeSlice) Len() int {
	return len(v)
}

func (v _runeSlice) Swap(i int, j int) {
	v[i], v[j] = v[j], v[i]
}

func (v _runeSlice) Less(i int, j int) bool {
	return v[i] < v[j]
}
