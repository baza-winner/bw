// Code generated by "setter -type=Item"; DO NOT EDIT; setter: go get github.com/baza-winner/bwcore/setter

package deftype

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	"sort"
)

// Set - множество значений типа Item с поддержкой интерфейсов Stringer и github.com/baza-winner/bwcore/bwjson.Jsonable
type Set map[Item]struct{}

// From - конструктор Set
func From(kk ...Item) Set {
	result := Set{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// FromSlice - конструктор Set
func FromSlice(kk []Item) Set {
	result := Set{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// FromSet - конструктор Set
func FromSet(s Set) Set {
	result := Set{}
	for k, _ := range s {
		result[k] = struct{}{}
	}
	return result
}

// Copy - создает независимую копию
func (v Set) Copy() Set {
	return FromSet(v)
}

// ToSlice - возвращает в виде []Item
func (v Set) ToSlice() []Item {
	result := _ItemSlice{}
	for k, _ := range v {
		result = append(result, k)
	}
	sort.Sort(result)
	return result
}

func _SetToSliceTestHelper(kk []Item) []Item {
	return FromSlice(kk).ToSlice()
}

// String - поддержка интерфейса Stringer
func (v Set) String() string {
	return bwjson.PrettyJsonOf(v)
}

// GetDataForJson - поддержка интерфейса bwjson.Jsonable
func (v Set) GetDataForJson() interface{} {
	result := []interface{}{}
	for k, _ := range v {
		result = append(result, k.String())
	}
	return result
}

// ToSliceOfStrings - возвращает []string строковых представлений элементов множества
func (v Set) ToSliceOfStrings() []string {
	result := []string{}
	for k, _ := range v {
		result = append(result, k.String())
	}
	sort.Strings(result)
	return result
}

// Has - возвращает true, если множество содержит заданный элемент, в противном случае - false
func (v Set) Has(k Item) bool {
	_, ok := v[k]
	return ok
}

/*
HasAny - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Set) HasAny(kk ...Item) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSlice - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Set) HasAnyOfSlice(kk []Item) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSet - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Set) HasAnyOfSet(s Set) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasEach - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Set) HasEach(kk ...Item) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSlice - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Set) HasEachOfSlice(kk []Item) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSet - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Set) HasEachOfSet(s Set) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

// Add - добавляет элементы в множество v
func (v Set) Add(kk ...Item) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

// AddSlice - добавляет элементы в множество v
func (v Set) AddSlice(kk []Item) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

// AddSet - добавляет элементы в множество v
func (v Set) AddSet(s Set) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

// Del - удаляет элементы из множествa v
func (v Set) Del(kk ...Item) {
	for _, k := range kk {
		delete(v, k)
	}
}

// DelSlice - удаляет элементы из множествa v
func (v Set) DelSlice(kk []Item) {
	for _, k := range kk {
		delete(v, k)
	}
}

// DelSet - удаляет элементы из множествa v
func (v Set) DelSet(s Set) {
	for k, _ := range s {
		delete(v, k)
	}
}

// Union - возвращает результат объединения двух множеств. Исходные множества остаются без изменений
func (v Set) Union(s Set) Set {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Intersect - возвращает результат пересечения двух множеств. Исходные множества остаются без изменений
func (v Set) Intersect(s Set) Set {
	result := Set{}
	for k, _ := range v {
		if _, ok := s[k]; ok {
			result[k] = struct{}{}
		}
	}
	return result
}

// Subtract - возвращает результат вычитания двух множеств. Исходные множества остаются без изменений
func (v Set) Subtract(s Set) Set {
	result := Set{}
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			result[k] = struct{}{}
		}
	}
	return result
}

type _ItemSlice []Item

func (v _ItemSlice) Len() int {
	return len(v)
}

func (v _ItemSlice) Swap(i int, j int) {
	v[i], v[j] = v[j], v[i]
}

func (v _ItemSlice) Less(i int, j int) bool {
	return v[i] < v[j]
}
