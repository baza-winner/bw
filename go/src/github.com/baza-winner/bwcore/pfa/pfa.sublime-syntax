%YAML 1.2
---
name: PFA
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - pfa
scope: source.pfa

variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'

  pathKeyStart: '[_a-z]'
  pathKey: '{{pathKeyStart}}[_\w\d]*'
  pathItem: '(?:\.(?:-?\d+|{{pathKey}}))'
  optPathItems: '(?:\.(?:-?\d+|{{pathKey}}))*'

  pathHash: '(?:\.#)'
  directPath: '{{pathKey}}{{optPathItems}}'
  pathStart: '({{directPath}}\.)?\{(?={{directPath}})'
  pathContinue: '{{directPath}}\}{{optPathItems}}\.\{'
  pathEnd: '(?:{{directPath}})?\}{{optPathItems}}{{pathHash}}?'
  indirectPathStart: '{{directPath}}\.\{'
  justPath: '{{directPath}}{{pathHash}}?'

  directPathInPathGroup: '(?:{{pathKey}}|{{pathItem}}){{optPathItems}}'
  pathStartInPathGroup: '({{directPathInPathGroup}}\.)?\{(?={{directPathInPathGroup}})'
  pathContinueInPathGroup: '{{directPathInPathGroup}}\}{{optPathItems}}\.\{'
  pathEndInPathGroup: '(?:{{directPathInPathGroup}})?\}{{optPathItems}}{{pathHash}}?'
  indirectPathStartInPathGroup: '{{directPathInPathGroup}}\.\{'
  justPathInPathGroup: '{{directPathInPathGroup}}{{pathHash}}?|{{pathHash}}|\.'

  rune: \'(?:\\.|.)\'
  number: \d+(?:\.\d+)?
  languageConsts: true|false|nil
  conditionConsts: 'OpenBraces|Punct|Symbol|EOF|Space|Letter|Digit'
  ruleActionConsts: 'Item|Array|Map|{{languageConsts}}'
  ruleActions: (?:(?:Pull|Push)Rune)
  transformers: ParseNumber|PairBrace|Escape|ButLast

contexts:
  prototype:
    - include: space

  main:
    - match: \b{{ident}}\b
      scope: entity.name.pfa
      push: entityValue

    - include: illegal

  entityValue:
    - match: \{
      scope: punctuation.section.block.begin.pfa
      set: rules

    - match: \(
      scope: punctuation.section.parens.begin.pfa
      set: ruleCondition

    - match: \d+
      scope: constant.numeric.integer.pfa
      pop: true

    - match: \b{{ident}}\b
      scope: entity.name.pfa

    - include: illegal

  rules:
    - meta_scope: meta.block.pfa

    - match: '\${{ident}}'
      scope: entity.name.pfa

    - match: '{{pathStart}}'
      scope: variable.other.pfa
      push:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinue}}'
        - match: '{{pathEnd}}'
          set: beginRulesInPathGroup
        - match: '{{indirectPathStart}}'
          push: indirectPath
        - include: illegal
    - match: '{{justPath}}'
      scope: variable.other.pfa
      push: beginRulesInPathGroup

    - match: \(
      scope: punctuation.section.parens.begin.pfa
      push: ruleCondition

    - match: \}
      scope: punctuation.section.block.begin.pfa
      pop: true

    - include: illegal

  beginRulesInPathGroup:
    - match: \(
      scope: punctuation.section.parens.begin.pfa
      set: rulesInPathGroup
    - include: illegal

  rulesInPathGroup:
    - match: '\${{ident}}'
      scope: entity.name.pfa

    - match: '{{pathStartInPathGroup}}'
      scope: variable.other.pfa
      push:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinueInPathGroup}}'
        - match: '{{pathEndInPathGroup}}'
          set: rulesInPathGroup
        - match: '{{indirectPathStartInPathGroup}}'
          push: indirectPath
        - include: illegal
    - match: '{{justPathInPathGroup}}'
      scope: variable.other.pfa
      push: rulesInPathGroup

    - match: \(
      scope: punctuation.section.parens.begin.pfa
      push: ruleConditionOfRulesInPathGroup

    - match: \)
      pop: true

    - include: illegal

  rulesOfRulesInPathGroup:
    - meta_scope: meta.block.pfa

    - match: '\${{ident}}'
      scope: entity.name.pfa

    - match: '{{pathStartInPathGroup}}'
      scope: variable.other.pfa
      push:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinueInPathGroup}}'
        - match: '{{pathEndInPathGroup}}'
          set: beginRulesInPathGroup
        - match: '{{indirectPathStartInPathGroup}}'
          push: indirectPath
        - include: illegal
    - match: '{{justPathInPathGroup}}'
      scope: variable.other.pfa
      push: beginRulesInPathGroup

    - match: \(
      scope: punctuation.section.parens.begin.pfa
      push: ruleConditionOfRulesInPathGroup

    - match: \}
      scope: punctuation.section.block.begin.pfa
      pop: true

    - include: illegal

  ruleConditionOfRulesInPathGroup:
    - include: ruleConditionHelper

    - match: '{{pathStartInPathGroup}}'
      scope: variable.other.pfa
      push:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinueInPathGroup}}'
        - match: '{{pathEndInPathGroup}}'
          set: ruleConditionPathArgOrPathGroupInPathGroup
        - match: '{{indirectPathStartInPathGroup}}'
          push: indirectPath
        - include: illegal
    - match: '{{justPathInPathGroup}}'
      scope: variable.other.pfa
      push: ruleConditionPathArgOrPathGroupInPathGroup

    - match: ':'
      scope: punctuation.separator.pfa
      set: ruleActionOfRulesInPathGroup

    - include: illegal

  ruleCondition:
    - include: ruleConditionHelper

    - match: '{{pathStart}}'
      scope: variable.other.pfa
      push:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinue}}'
        - match: '{{pathEnd}}'
          set: ruleConditionPathArgOrPathGroup
        - match: '{{indirectPathStart}}'
          push: indirectPath
        - include: illegal
    - match: '{{justPath}}'
      scope: variable.other.pfa
      push: ruleConditionPathArgOrPathGroup

    - match: ':'
      scope: punctuation.separator.pfa
      set: ruleAction

    - include: illegal

  ruleConditionInPathGroup:
    - include: ruleConditionHelper

    - match: '{{pathStartInPathGroup}}'
      scope: variable.other.pfa
      push:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinueInPathGroup}}'
        - match: '{{pathEndInPathGroup}}'
          set: ruleConditionPathArgOrPathGroupInPathGroup
        - match: '{{indirectPathStartInPathGroup}}'
          push: indirectPath
        - include: illegal
    - match: '{{justPathInPathGroup}}'
      scope: variable.other.pfa
      push: ruleConditionPathArgOrPathGroupInPathGroup

    - include: illegal

  ruleConditionPathArgOrPathGroupInPathGroup:
    - include: ruleConditionPathArgOrPathGroupHelper
    - include: pathInPathGroup
    - include: illegal


  ruleConditionPathArgOrPathGroup:
    - include: ruleConditionPathArgOrPathGroupHelper
    - include: path
    - include: illegal

  ruleConditionPathArgGroup:
    - meta_scope: meta.brackets

    - match: \]
      scope: punctuation.section.brackets.end.pfa
      pop: true

    - match: \"
      scope: punctuation.definition.string.begin.pfa
      push:
        - meta_scope: string.quoted.double.pfa
        - match: '\\.'
          scope: constant.character.escape.pfa
        - match: '"'
          scope: punctuation.definition.string.end.pfa
          pop: true

    - match: \<
      scope: punctuation.section.group.begin.pfa
      push:
        - match: \>
          scope: punctuation.section.group.end.pfa
          pop: true
        - match: .
          scope: string.quoted.single.pfa

    - match: (\${{ident}})|({{rune}})|({{number}})
      captures:
        1: entity.name.pfa
        2: constant.character.pfa
        3: constant.numeric.pfa

    - include: illegal

  ruleActionEnd:
    - include: ruleActionEndHelper
    - include: illegal

  unexpected:
    - include: ruleActionEndHelper

    - match: '{{pathStart}}'
      scope: variable.other.pfa
      set:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinue}}'
        - match: '{{pathEnd}}'
          set: ruleActionEnd
        - match: '{{indirectPathStart}}'
          push: indirectPath
        - include: illegal
    - match: '{{justPath}}'
      scope: variable.other.pfa
      set: ruleActionEnd

    - include: illegal

  unexpectedOfRulesInPathGroup:
    - include: ruleActionEndHelper

    - match: '{{pathStartInPathGroup}}'
      scope: variable.other.pfa
      set:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinueInPathGroup}}'
        - match: '{{pathEndInPathGroup}}'
          set: ruleActionEnd
        - match: '{{indirectPathStartInPathGroup}}'
          push: indirectPath
        - include: illegal
    - match: '{{justPathInPathGroup}}'
      scope: variable.other.pfa
      set: ruleActionEnd

    - include: illegal

  ruleActionOfRulesInPathGroup:
    - include: ruleActionEndHelper

    - match: '{{ruleActions}}'
      scope: keyword.other.pfa

    - match: \bUnexpected\b
      scope: keyword.other.pfa
      set: unexpectedOfRulesInPathGroup

    - match: (\${{ident}})|({{rune}})|({{number}}|({{ruleActionConsts}})|{{languageConsts}})
      captures:
        1: entity.name.pfa
        2: constant.character.pfa
        3: constant.numeric.pfa
        4: constant.language
        5: constant.language
      push: ruleActionOpInPathGroup

    - match: '{{pathStartInPathGroup}}'
      scope: variable.other.pfa
      push:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinueInPathGroup}}'
        - match: '{{pathEndInPathGroup}}'
          set: ruleActionOpInPathGroupOrPathGroup
        - match: '{{indirectPathStartInPathGroup}}'
          push: indirectPath
        - include: illegal
    - match: '{{justPathInPathGroup}}'
      scope: variable.other.pfa
      push: ruleActionOpInPathGroupOrPathGroup

    - match: \"
      scope: punctuation.definition.string.begin.pfa
      set:
        - meta_scope: string.quoted.double.pfa
        - match: '\\.'
          scope: constant.character.escape.pfa
        - match: \"
          scope: punctuation.definition.string.end.pfa
          push: ruleActionOpInPathGroup

    - match: \{
      scope: punctuation.section.block.begin.pfa
      push: rulesOfRulesInPathGroup

    - include: illegal


  ruleAction:
    - include: ruleActionEndHelper

    - match: '{{ruleActions}}'
      scope: keyword.other.pfa

    - match: \bUnexpected\b
      scope: keyword.other.pfa
      set: unexpected

    - match: (\${{ident}})|({{rune}})|({{number}}|({{ruleActionConsts}})|{{languageConsts}})
      captures:
        1: entity.name.pfa
        2: constant.character.pfa
        3: constant.numeric.pfa
        4: constant.language
        5: constant.language
      push: ruleActionOp

    - match: '{{pathStart}}'
      scope: variable.other.pfa
      push:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinue}}'
        - match: '{{pathEnd}}'
          set: ruleActionOpOrPathGroup
        - match: '{{indirectPathStart}}'
          push: indirectPath
        - include: illegal
    - match: '{{justPath}}'
      scope: variable.other.pfa
      push: ruleActionOpOrPathGroup

    - match: \"
      scope: punctuation.definition.string.begin.pfa
      set:
        - meta_scope: string.quoted.double.pfa
        - match: '\\.'
          scope: constant.character.escape.pfa
        - match: \"
          scope: punctuation.definition.string.end.pfa
          push: ruleActionOp

    - match: \{
      scope: punctuation.section.block.begin.pfa
      push: rules

    - include: illegal

  ruleActionOpOrPathGroup:
    - include: ruleActionOpHelper

    - match: \(
      set: ruleActionInPathGroup

    - include: illegal

  ruleActionOpInPathGroupOrPathGroup:
    - include: ruleActionOpHelperInPathGroup

    - match: \(
      set: ruleActionInPathGroup

    - include: illegal

  ruleActionOp:
    - include: ruleActionOpHelper
    - include: illegal

  ruleActionOpInPathGroup:
    - include: ruleActionOpHelperInPathGroup
    - include: illegal

  ruleActionTransform:
    - match: '{{transformers}}'
      scope: keyword.operator.word.pfa
      pop: true

    - match: (\${{ident}})|({{rune}})|({{number}}|({{ruleActionConsts}})|{{languageConsts}})
      captures:
        1: entity.name.pfa
        2: constant.character.pfa
        3: constant.numeric.pfa
        4: constant.language
        5: constant.language
      set: ruleActionOpInTransform

    - match: '{{pathStart}}'
      scope: variable.other.pfa
      set:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinue}}'
        - match: '{{pathEnd}}'
          set: ruleActionOpInTransform
        - match: '{{indirectPathStart}}'
          push: indirectPath
        - include: illegal
    - match: '{{justPath}}'
      scope: variable.other.pfa
      set: ruleActionOpInTransform

    - match: \"
      scope: punctuation.definition.string.begin.pfa
      set:
        - meta_scope: string.quoted.double.pfa
        - match: '\\.'
          scope: constant.character.escape.pfa
        - match: \"
          scope: punctuation.definition.string.end.pfa
          set: ruleActionOpInTransform

    - include: illegal

  ruleActionOpInTransform:
    - match: '\|'
      scope: keyword.operator.assignment.pfa
      push: ruleActionTransform

    - match: '>{1,3}'
      scope: keyword.operator.assignment.pfa
      set: ruleActionTarget

    - include: illegal

  ruleActionTarget:
    - include: path
    - include: illegal

  # InPathGroup

  ruleActionInPathGroup:
    - match: \)
      scope: punctuation.section.parens.end
      pop: true

    - match: '{{ruleActions}}'
      scope: keyword.other.pfa

    - match: (\${{ident}})|({{rune}})|({{number}}|({{ruleActionConsts}})|{{languageConsts}})
      captures:
        1: entity.name.pfa
        2: constant.character.pfa
        3: constant.numeric.pfa
        4: constant.language
        5: constant.language
      push: ruleActionOpInPathGroup

    - match: '{{pathStartInPathGroup}}'
      scope: variable.other.pfa
      set:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinueInPathGroup}}'
        - match: '{{pathEndInPathGroup}}'
          push: ruleActionOpInPathGroupOrPathGroup
        - match: '{{indirectPathStartInPathGroup}}'
          push: indirectPathInPathGroup
        - include: illegal
    - match: '{{justPathInPathGroup}}'
      scope: variable.other.pfa
      push: ruleActionOpInPathGroupOrPathGroup

    - match: \"
      scope: punctuation.definition.string.begin.pfa
      set:
        - meta_scope: string.quoted.double.pfa
        - match: '\\.'
          scope: constant.character.escape.pfa
        - match: \"
          scope: punctuation.definition.string.end.pfa
          push: ruleActionOpInPathGroup

    - match: \{
      scope: punctuation.section.block.begin.pfa
      push: rules

    - include: illegal

  ruleActionTransformInPathGroup:
    - match: '{{transformers}}'
      scope: keyword.operator.word.pfa
      pop: true

    - match: (\${{ident}})|({{rune}})|({{number}}|({{ruleActionConsts}})|{{languageConsts}})
      captures:
        1: entity.name.pfa
        2: constant.character.pfa
        3: constant.numeric.pfa
        4: constant.language
        5: constant.language
      set: ruleActionOpInTransformInPathGroup

    - match: '{{pathStartInPathGroup}}'
      scope: variable.other.pfa
      set:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinueInPathGroup}}'
        - match: '{{pathEndInPathGroup}}'
          set: ruleActionOpInTransformInPathGroup
        - match: '{{indirectPathStartInPathGroup}}'
          push: indirectPathInPathGroup
        - include: illegal
    - match: '{{justPathInPathGroup}}'
      scope: variable.other.pfa
      set: ruleActionOpInTransformInPathGroup

    - match: \"
      scope: punctuation.definition.string.begin.pfa
      set:
        - meta_scope: string.quoted.double.pfa
        - match: '\\.'
          scope: constant.character.escape.pfa
        - match: \"
          scope: punctuation.definition.string.end.pfa
          set: ruleActionOpInTransformInPathGroup

    - include: illegal

  ruleActionOpInTransformInPathGroup:
    - match: '\|'
      scope: keyword.operator.assignment.pfa
      push: ruleActionTransformInPathGroup

    - match: '>{1,3}'
      scope: keyword.operator.assignment.pfa
      set: ruleActionTargetInPathGroup

    - include: illegal

  ruleActionTargetInPathGroup:
    - include: pathInPathGroup
    - include: illegal

# ======================================================

  space:
    - meta_include_prototype: false
    - match: '[\s]+'
    - match: //
      scope: punctuation.definition.comment.pfa
      push:
        - meta_scope: comment.line.pfa
        - match: $
          pop: true
    - match: /\*
      scope: punctuation.definition.comment.begin.pfa
      push:
        - meta_scope: comment
        - match: \*/
          scope: punctuation.definition.comment.end.pfa
          pop: true

  illegal:
    - meta_include_prototype: false
    - match: .
      scope: invalid.illegal.pfa

  indirectPath:
    - meta_include_prototype: false
    - meta_scope: variable.other.pfa
    - match: '{{pathContinue}}'
    - match: '{{indirectPathStart}}'
      push: indirectPath
    - match: '{{directPath}}\}{{optPathItems}}'
      pop: true
    - include: illegal

  path:
    - meta_include_prototype: false
    - match: '{{pathStart}}'
      scope: variable.other.pfa
      set:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinue}}'
        - match: '{{pathEnd}}'
          pop: true
        - match: '{{indirectPathStart}}'
          push: indirectPath
        - include: illegal
    - match: '{{justPath}}'
      scope: variable.other.pfa
      pop: true

  pathInPathGroup:
    - meta_include_prototype: false
    - match: '{{pathStartInPathGroup}}'
      scope: variable.other.pfa
      set:
        - meta_scope: variable.other.pfa
        - match: '{{pathContinueInPathGroup}}'
        - match: '{{pathEndInPathGroup}}'
          pop: true
        - match: '{{indirectPathStartInPathGroup}}'
          push: indirectPathInPathGroup
        - include: illegal
    - match: '{{justPathInPathGroup}}'
      scope: variable.other.pfa
      pop: true

  ruleActionOpHelper:
    - meta_include_prototype: false
    - match: '\|'
      scope: keyword.operator.assignment.pfa
      push: ruleActionTransform

    - match: '>{1,3}'
      scope: keyword.operator.assignment.pfa
      set: ruleActionTarget

  ruleActionOpHelperInPathGroup:
    - meta_include_prototype: false
    - match: '\|'
      scope: keyword.operator.assignment.pfa
      push: ruleActionTransformInPathGroup

    - match: '>{1,3}'
      scope: keyword.operator.assignment.pfa
      set: ruleActionTargetInPathGroup

  ruleActionEndHelper:
    - meta_include_prototype: false
    - match: \)
      scope: punctuation.section.parens.end
      pop: true

  ruleConditionPathArgOrPathGroupHelper:
    - meta_include_prototype: false
    - match: \(
      scope: punctuation.section.parens.begin.pfa
      set: ruleConditionInPathGroup

    - match: (\${{ident}})|({{rune}})|({{number}}|({{conditionConsts}})|{{languageConsts}})
      captures:
        1: entity.name.pfa
        2: constant.character.pfa
        3: constant.numeric.pfa
        4: constant.language
        5: constant.language
      pop: true

    - match: \"
      scope: punctuation.definition.string.begin.pfa
      set:
        - meta_scope: string.quoted.double.pfa
        - match: '\\.'
          scope: constant.character.escape.pfa
        - match: \"
          scope: punctuation.definition.string.end.pfa
          pop: true

    - match: \<
      scope: punctuation.section.group.begin.pfa
      set:
        - match: \>
          scope: punctuation.section.group.end.pfa
          pop: true
        - match: .
          scope: string.quoted.single.pfa

    - match: \[
      scope: punctuation.section.brackets.begin.pfa
      set: ruleConditionPathArgGroup

  indirectPathInPathGroup:
    - meta_include_prototype: false
    - meta_scope: variable.other.pfa
    - match: '{{pathContinueInPathGroup}}'
    - match: '{{indirectPathStartInPathGroup}}'
      push: indirectPath
    - match: '{{directPathInPathGroup}}\}{{optPathItems}}'
      pop: true
    - include: illegal

  ruleConditionHelper:
    - meta_include_prototype: false
    - match: '({{conditionConsts}})|({{rune}})'
      captures:
        1: constant.language.pfa
        2: constant.character.pfa

    - match: \)
      scope: punctuation.section.parens.end.pfa
      pop: true

