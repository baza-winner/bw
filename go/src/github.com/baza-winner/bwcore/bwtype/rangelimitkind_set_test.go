// Code generated by "bwsetter -type=RangeLimitKind"; DO NOT EDIT; bwsetter: go get -type RangeLimitKind -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwtype

import (
	"encoding/json"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"testing"
)

func TestRangeLimitKindSet(t *testing.T) {
	bwtesting.BwRunTests(t, RangeLimitKindSetFrom, map[string]bwtesting.Case{"RangeLimitKindSetFrom": {
		In: []interface{}{_RangeLimitKindSetTestItemA, _RangeLimitKindSetTestItemB},
		Out: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSetFromSlice, map[string]bwtesting.Case{"RangeLimitKindSetFromSlice": {
		In: []interface{}{[]RangeLimitKind{_RangeLimitKindSetTestItemA, _RangeLimitKindSetTestItemB}},
		Out: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSetFromSet, map[string]bwtesting.Case{"RangeLimitKindSetFromSet": {
		In: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}},
		Out: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet.Copy, map[string]bwtesting.Case{"RangeLimitKindSet.Copy": {
		In: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}},
		Out: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet.ToSlice, map[string]bwtesting.Case{"RangeLimitKindSet.ToSlice": {
		In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}},
		Out: []interface{}{[]RangeLimitKind{_RangeLimitKindSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, _RangeLimitKindSetToSliceTestHelper, map[string]bwtesting.Case{"_RangeLimitKindSetToSliceTestHelper": {
		In:  []interface{}{[]RangeLimitKind{_RangeLimitKindSetTestItemB, _RangeLimitKindSetTestItemA}},
		Out: []interface{}{[]RangeLimitKind{_RangeLimitKindSetTestItemA, _RangeLimitKindSetTestItemB}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet.String, map[string]bwtesting.Case{"RangeLimitKindSet.String": {
		In: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}},
		Out: []interface{}{func() string {
			result, _ := json.Marshal(_RangeLimitKindSetTestItemA)
			return "[" + string(result) + "]"
		}()},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet.MarshalJSON, map[string]bwtesting.Case{"RangeLimitKindSet.MarshalJSON": {
		In: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}},
		Out: []interface{}{(func() []byte {
			result, _ := json.Marshal([]interface{}{_RangeLimitKindSetTestItemA})
			return result
		})(), nil},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet.ToSliceOfStrings, map[string]bwtesting.Case{"RangeLimitKindSet.ToSliceOfStrings": {
		In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{_RangeLimitKindSetTestItemA.String()}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet.Has, map[string]bwtesting.Case{
		"RangeLimitKindSet.Has: false": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, _RangeLimitKindSetTestItemB},
			Out: []interface{}{false},
		},
		"RangeLimitKindSet.Has: true": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, _RangeLimitKindSetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RangeLimitKindSet.HasAny, map[string]bwtesting.Case{
		"RangeLimitKindSet.HasAny: empty": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}},
			Out: []interface{}{false},
		},
		"RangeLimitKindSet.HasAny: false": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, _RangeLimitKindSetTestItemB},
			Out: []interface{}{false},
		},
		"RangeLimitKindSet.HasAny: true": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, _RangeLimitKindSetTestItemA, _RangeLimitKindSetTestItemB},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RangeLimitKindSet.HasAnyOfSlice, map[string]bwtesting.Case{
		"RangeLimitKindSet.HasAnyOfSlice: empty": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, []RangeLimitKind{}},
			Out: []interface{}{false},
		},
		"RangeLimitKindSet.HasAnyOfSlice: false": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, []RangeLimitKind{_RangeLimitKindSetTestItemB}},
			Out: []interface{}{false},
		},
		"RangeLimitKindSet.HasAnyOfSlice: true": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, []RangeLimitKind{_RangeLimitKindSetTestItemA, _RangeLimitKindSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RangeLimitKindSet.HasAnyOfSet, map[string]bwtesting.Case{
		"RangeLimitKindSet.HasAnyOfSet: empty": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, RangeLimitKindSet{}},
			Out: []interface{}{false},
		},
		"RangeLimitKindSet.HasAnyOfSet: false": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, RangeLimitKindSet{_RangeLimitKindSetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"RangeLimitKindSet.HasAnyOfSet: true": {
			In: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, RangeLimitKindSet{
				_RangeLimitKindSetTestItemA: struct{}{},
				_RangeLimitKindSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RangeLimitKindSet.HasEach, map[string]bwtesting.Case{
		"RangeLimitKindSet.HasEach: empty": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}},
			Out: []interface{}{true},
		},
		"RangeLimitKindSet.HasEach: false": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, _RangeLimitKindSetTestItemA, _RangeLimitKindSetTestItemB},
			Out: []interface{}{false},
		},
		"RangeLimitKindSet.HasEach: true": {
			In: []interface{}{RangeLimitKindSet{
				_RangeLimitKindSetTestItemA: struct{}{},
				_RangeLimitKindSetTestItemB: struct{}{},
			}, _RangeLimitKindSetTestItemA, _RangeLimitKindSetTestItemB},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RangeLimitKindSet.HasEachOfSlice, map[string]bwtesting.Case{
		"RangeLimitKindSet.HasEachOfSlice: empty": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, []RangeLimitKind{}},
			Out: []interface{}{true},
		},
		"RangeLimitKindSet.HasEachOfSlice: false": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, []RangeLimitKind{_RangeLimitKindSetTestItemA, _RangeLimitKindSetTestItemB}},
			Out: []interface{}{false},
		},
		"RangeLimitKindSet.HasEachOfSlice: true": {
			In: []interface{}{RangeLimitKindSet{
				_RangeLimitKindSetTestItemA: struct{}{},
				_RangeLimitKindSetTestItemB: struct{}{},
			}, []RangeLimitKind{_RangeLimitKindSetTestItemA, _RangeLimitKindSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RangeLimitKindSet.HasEachOfSet, map[string]bwtesting.Case{
		"RangeLimitKindSet.HasEachOfSet: empty": {
			In:  []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, RangeLimitKindSet{}},
			Out: []interface{}{true},
		},
		"RangeLimitKindSet.HasEachOfSet: false": {
			In: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, RangeLimitKindSet{
				_RangeLimitKindSetTestItemA: struct{}{},
				_RangeLimitKindSetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"RangeLimitKindSet.HasEachOfSet: true": {
			In: []interface{}{RangeLimitKindSet{
				_RangeLimitKindSetTestItemA: struct{}{},
				_RangeLimitKindSetTestItemB: struct{}{},
			}, RangeLimitKindSet{
				_RangeLimitKindSetTestItemA: struct{}{},
				_RangeLimitKindSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RangeLimitKindSet._AddTestHelper, map[string]bwtesting.Case{"RangeLimitKindSet.Add": {
		In: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, _RangeLimitKindSetTestItemB},
		Out: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet._AddSliceTestHelper, map[string]bwtesting.Case{"RangeLimitKindSet.AddSlice": {
		In: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, []RangeLimitKind{_RangeLimitKindSetTestItemB}},
		Out: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet._AddSetTestHelper, map[string]bwtesting.Case{"RangeLimitKindSet.AddSet": {
		In: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, RangeLimitKindSet{_RangeLimitKindSetTestItemB: struct{}{}}},
		Out: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet._DelTestHelper, map[string]bwtesting.Case{"RangeLimitKindSet.Del": {
		In: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}, _RangeLimitKindSetTestItemB},
		Out: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet._DelSliceTestHelper, map[string]bwtesting.Case{"RangeLimitKindSet.DelSlice": {
		In: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}, []RangeLimitKind{_RangeLimitKindSetTestItemB}},
		Out: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet._DelSetTestHelper, map[string]bwtesting.Case{"RangeLimitKindSet.DelSet": {
		In: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}, RangeLimitKindSet{_RangeLimitKindSetTestItemB: struct{}{}}},
		Out: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet.Union, map[string]bwtesting.Case{"RangeLimitKindSet.Union": {
		In: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}, RangeLimitKindSet{_RangeLimitKindSetTestItemB: struct{}{}}},
		Out: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet.Intersect, map[string]bwtesting.Case{"RangeLimitKindSet.Intersect": {
		In: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}, RangeLimitKindSet{_RangeLimitKindSetTestItemB: struct{}{}}},
		Out: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, RangeLimitKindSet.Subtract, map[string]bwtesting.Case{"RangeLimitKindSet.Subtract": {
		In: []interface{}{RangeLimitKindSet{
			_RangeLimitKindSetTestItemA: struct{}{},
			_RangeLimitKindSetTestItemB: struct{}{},
		}, RangeLimitKindSet{_RangeLimitKindSetTestItemB: struct{}{}}},
		Out: []interface{}{RangeLimitKindSet{_RangeLimitKindSetTestItemA: struct{}{}}},
	}})
}
