// Code generated by "bwsetter -type=int"; DO NOT EDIT; bwsetter: go get -type=int -set=IntSet -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"strconv"
	"testing"
)

func TestIntSet(t *testing.T) {
	bwtesting.BwRunTests(t, IntSetFrom, map[string]bwtesting.TestCaseStruct{"IntSetFrom": {
		In: []interface{}{[]int{_IntSetTestItemA, _IntSetTestItemB}},
		Out: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, IntSetFromSlice, map[string]bwtesting.TestCaseStruct{"IntSetFromSlice": {
		In: []interface{}{[]int{_IntSetTestItemA, _IntSetTestItemB}},
		Out: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, IntSetFromSet, map[string]bwtesting.TestCaseStruct{"IntSetFromSet": {
		In: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}},
		Out: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, IntSet.Copy, map[string]bwtesting.TestCaseStruct{"IntSet.Copy": {
		In: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}},
		Out: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, IntSet.ToSlice, map[string]bwtesting.TestCaseStruct{"IntSet.ToSlice": {
		In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}},
		Out: []interface{}{[]int{_IntSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, _IntSetToSliceTestHelper, map[string]bwtesting.TestCaseStruct{"_IntSetToSliceTestHelper": {
		In:  []interface{}{[]int{_IntSetTestItemB, _IntSetTestItemA}},
		Out: []interface{}{[]int{_IntSetTestItemA, _IntSetTestItemB}},
	}})
	bwtesting.BwRunTests(t, IntSet.String, map[string]bwtesting.TestCaseStruct{"IntSet.String": {
		In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}},
		Out: []interface{}{bwjson.PrettyJson([]int{_IntSetTestItemA})},
	}})
	bwtesting.BwRunTests(t, IntSet.DataForJSON, map[string]bwtesting.TestCaseStruct{"IntSet.DataForJSON": {
		In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{_IntSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, IntSet.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"IntSet.ToSliceOfStrings": {
		In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{strconv.FormatInt(int64(_IntSetTestItemA), 10)}},
	}})
	bwtesting.BwRunTests(t, IntSet.Has, map[string]bwtesting.TestCaseStruct{
		"IntSet.Has: false": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, _IntSetTestItemB},
			Out: []interface{}{false},
		},
		"IntSet.Has: true": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, _IntSetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, IntSet.HasAny, map[string]bwtesting.TestCaseStruct{
		"IntSet.HasAny: empty": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, []int{}},
			Out: []interface{}{false},
		},
		"IntSet.HasAny: false": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, []int{_IntSetTestItemB}},
			Out: []interface{}{false},
		},
		"IntSet.HasAny: true": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, []int{_IntSetTestItemA, _IntSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, IntSet.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"IntSet.HasAnyOfSlice: empty": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, []int{}},
			Out: []interface{}{false},
		},
		"IntSet.HasAnyOfSlice: false": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, []int{_IntSetTestItemB}},
			Out: []interface{}{false},
		},
		"IntSet.HasAnyOfSlice: true": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, []int{_IntSetTestItemA, _IntSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, IntSet.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"IntSet.HasAnyOfSet: empty": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, IntSet{}},
			Out: []interface{}{false},
		},
		"IntSet.HasAnyOfSet: false": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, IntSet{_IntSetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"IntSet.HasAnyOfSet: true": {
			In: []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, IntSet{
				_IntSetTestItemA: struct{}{},
				_IntSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, IntSet.HasEach, map[string]bwtesting.TestCaseStruct{
		"IntSet.HasEach: empty": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, []int{}},
			Out: []interface{}{true},
		},
		"IntSet.HasEach: false": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, []int{_IntSetTestItemA, _IntSetTestItemB}},
			Out: []interface{}{false},
		},
		"IntSet.HasEach: true": {
			In: []interface{}{IntSet{
				_IntSetTestItemA: struct{}{},
				_IntSetTestItemB: struct{}{},
			}, []int{_IntSetTestItemA, _IntSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, IntSet.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"IntSet.HasEachOfSlice: empty": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, []int{}},
			Out: []interface{}{true},
		},
		"IntSet.HasEachOfSlice: false": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, []int{_IntSetTestItemA, _IntSetTestItemB}},
			Out: []interface{}{false},
		},
		"IntSet.HasEachOfSlice: true": {
			In: []interface{}{IntSet{
				_IntSetTestItemA: struct{}{},
				_IntSetTestItemB: struct{}{},
			}, []int{_IntSetTestItemA, _IntSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, IntSet.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"IntSet.HasEachOfSet: empty": {
			In:  []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, IntSet{}},
			Out: []interface{}{true},
		},
		"IntSet.HasEachOfSet: false": {
			In: []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, IntSet{
				_IntSetTestItemA: struct{}{},
				_IntSetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"IntSet.HasEachOfSet: true": {
			In: []interface{}{IntSet{
				_IntSetTestItemA: struct{}{},
				_IntSetTestItemB: struct{}{},
			}, IntSet{
				_IntSetTestItemA: struct{}{},
				_IntSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, IntSet._AddTestHelper, map[string]bwtesting.TestCaseStruct{"IntSet.Add": {
		In: []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, []int{_IntSetTestItemB}},
		Out: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, IntSet._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"IntSet.AddSlice": {
		In: []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, []int{_IntSetTestItemB}},
		Out: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, IntSet._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"IntSet.AddSet": {
		In: []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, IntSet{_IntSetTestItemB: struct{}{}}},
		Out: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, IntSet._DelTestHelper, map[string]bwtesting.TestCaseStruct{"IntSet.Del": {
		In: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}, []int{_IntSetTestItemB}},
		Out: []interface{}{IntSet{_IntSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, IntSet._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"IntSet.DelSlice": {
		In: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}, []int{_IntSetTestItemB}},
		Out: []interface{}{IntSet{_IntSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, IntSet._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"IntSet.DelSet": {
		In: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}, IntSet{_IntSetTestItemB: struct{}{}}},
		Out: []interface{}{IntSet{_IntSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, IntSet.Union, map[string]bwtesting.TestCaseStruct{"IntSet.Union": {
		In: []interface{}{IntSet{_IntSetTestItemA: struct{}{}}, IntSet{_IntSetTestItemB: struct{}{}}},
		Out: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, IntSet.Intersect, map[string]bwtesting.TestCaseStruct{"IntSet.Intersect": {
		In: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}, IntSet{_IntSetTestItemB: struct{}{}}},
		Out: []interface{}{IntSet{_IntSetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, IntSet.Subtract, map[string]bwtesting.TestCaseStruct{"IntSet.Subtract": {
		In: []interface{}{IntSet{
			_IntSetTestItemA: struct{}{},
			_IntSetTestItemB: struct{}{},
		}, IntSet{_IntSetTestItemB: struct{}{}}},
		Out: []interface{}{IntSet{_IntSetTestItemA: struct{}{}}},
	}})
}
