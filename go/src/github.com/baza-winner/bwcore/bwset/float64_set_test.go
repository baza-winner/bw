// Code generated by "bwsetter -type=float64"; DO NOT EDIT; bwsetter: go get -type=float64 -set=Float64 -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"strconv"
	"testing"
)

func TestFloat64(t *testing.T) {
	bwtesting.BwRunTests(t, Float64From, map[string]bwtesting.TestCaseStruct{"Float64From": {
		In: []interface{}{[]float64{_Float64TestItemA, _Float64TestItemB}},
		Out: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float64FromSlice, map[string]bwtesting.TestCaseStruct{"Float64FromSlice": {
		In: []interface{}{[]float64{_Float64TestItemA, _Float64TestItemB}},
		Out: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float64FromSet, map[string]bwtesting.TestCaseStruct{"Float64FromSet": {
		In: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}},
		Out: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float64.Copy, map[string]bwtesting.TestCaseStruct{"Float64.Copy": {
		In: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}},
		Out: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float64.ToSlice, map[string]bwtesting.TestCaseStruct{"Float64.ToSlice": {
		In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}},
		Out: []interface{}{[]float64{_Float64TestItemA}},
	}})
	bwtesting.BwRunTests(t, _Float64ToSliceTestHelper, map[string]bwtesting.TestCaseStruct{"_Float64ToSliceTestHelper": {
		In:  []interface{}{[]float64{_Float64TestItemB, _Float64TestItemA}},
		Out: []interface{}{[]float64{_Float64TestItemA, _Float64TestItemB}},
	}})
	bwtesting.BwRunTests(t, Float64.String, map[string]bwtesting.TestCaseStruct{"Float64.String": {
		In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}},
		Out: []interface{}{bwjson.PrettyJson([]float64{_Float64TestItemA})},
	}})
	bwtesting.BwRunTests(t, Float64.DataForJSON, map[string]bwtesting.TestCaseStruct{"Float64.DataForJSON": {
		In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{_Float64TestItemA}},
	}})
	bwtesting.BwRunTests(t, Float64.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"Float64.ToSliceOfStrings": {
		In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}},
		Out: []interface{}{[]string{strconv.FormatFloat(float64(_Float64TestItemA), byte(0x66), -1, 64)}},
	}})
	bwtesting.BwRunTests(t, Float64.Has, map[string]bwtesting.TestCaseStruct{
		"Float64.Has: false": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, _Float64TestItemB},
			Out: []interface{}{false},
		},
		"Float64.Has: true": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, _Float64TestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float64.HasAny, map[string]bwtesting.TestCaseStruct{
		"Float64.HasAny: empty": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, []float64{}},
			Out: []interface{}{false},
		},
		"Float64.HasAny: false": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, []float64{_Float64TestItemB}},
			Out: []interface{}{false},
		},
		"Float64.HasAny: true": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, []float64{_Float64TestItemA, _Float64TestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float64.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"Float64.HasAnyOfSlice: empty": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, []float64{}},
			Out: []interface{}{false},
		},
		"Float64.HasAnyOfSlice: false": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, []float64{_Float64TestItemB}},
			Out: []interface{}{false},
		},
		"Float64.HasAnyOfSlice: true": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, []float64{_Float64TestItemA, _Float64TestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float64.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"Float64.HasAnyOfSet: empty": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, Float64{}},
			Out: []interface{}{false},
		},
		"Float64.HasAnyOfSet: false": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, Float64{_Float64TestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"Float64.HasAnyOfSet: true": {
			In: []interface{}{Float64{_Float64TestItemA: struct{}{}}, Float64{
				_Float64TestItemA: struct{}{},
				_Float64TestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float64.HasEach, map[string]bwtesting.TestCaseStruct{
		"Float64.HasEach: empty": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, []float64{}},
			Out: []interface{}{true},
		},
		"Float64.HasEach: false": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, []float64{_Float64TestItemA, _Float64TestItemB}},
			Out: []interface{}{false},
		},
		"Float64.HasEach: true": {
			In: []interface{}{Float64{
				_Float64TestItemA: struct{}{},
				_Float64TestItemB: struct{}{},
			}, []float64{_Float64TestItemA, _Float64TestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float64.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"Float64.HasEachOfSlice: empty": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, []float64{}},
			Out: []interface{}{true},
		},
		"Float64.HasEachOfSlice: false": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, []float64{_Float64TestItemA, _Float64TestItemB}},
			Out: []interface{}{false},
		},
		"Float64.HasEachOfSlice: true": {
			In: []interface{}{Float64{
				_Float64TestItemA: struct{}{},
				_Float64TestItemB: struct{}{},
			}, []float64{_Float64TestItemA, _Float64TestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float64.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"Float64.HasEachOfSet: empty": {
			In:  []interface{}{Float64{_Float64TestItemA: struct{}{}}, Float64{}},
			Out: []interface{}{true},
		},
		"Float64.HasEachOfSet: false": {
			In: []interface{}{Float64{_Float64TestItemA: struct{}{}}, Float64{
				_Float64TestItemA: struct{}{},
				_Float64TestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"Float64.HasEachOfSet: true": {
			In: []interface{}{Float64{
				_Float64TestItemA: struct{}{},
				_Float64TestItemB: struct{}{},
			}, Float64{
				_Float64TestItemA: struct{}{},
				_Float64TestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float64._AddTestHelper, map[string]bwtesting.TestCaseStruct{"Float64.Add": {
		In: []interface{}{Float64{_Float64TestItemA: struct{}{}}, []float64{_Float64TestItemB}},
		Out: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float64._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Float64.AddSlice": {
		In: []interface{}{Float64{_Float64TestItemA: struct{}{}}, []float64{_Float64TestItemB}},
		Out: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float64._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"Float64.AddSet": {
		In: []interface{}{Float64{_Float64TestItemA: struct{}{}}, Float64{_Float64TestItemB: struct{}{}}},
		Out: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float64._DelTestHelper, map[string]bwtesting.TestCaseStruct{"Float64.Del": {
		In: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}, []float64{_Float64TestItemB}},
		Out: []interface{}{Float64{_Float64TestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Float64._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Float64.DelSlice": {
		In: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}, []float64{_Float64TestItemB}},
		Out: []interface{}{Float64{_Float64TestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Float64._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"Float64.DelSet": {
		In: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}, Float64{_Float64TestItemB: struct{}{}}},
		Out: []interface{}{Float64{_Float64TestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Float64.Union, map[string]bwtesting.TestCaseStruct{"Float64.Union": {
		In: []interface{}{Float64{_Float64TestItemA: struct{}{}}, Float64{_Float64TestItemB: struct{}{}}},
		Out: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float64.Intersect, map[string]bwtesting.TestCaseStruct{"Float64.Intersect": {
		In: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}, Float64{_Float64TestItemB: struct{}{}}},
		Out: []interface{}{Float64{_Float64TestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Float64.Subtract, map[string]bwtesting.TestCaseStruct{"Float64.Subtract": {
		In: []interface{}{Float64{
			_Float64TestItemA: struct{}{},
			_Float64TestItemB: struct{}{},
		}, Float64{_Float64TestItemB: struct{}{}}},
		Out: []interface{}{Float64{_Float64TestItemA: struct{}{}}},
	}})
}
