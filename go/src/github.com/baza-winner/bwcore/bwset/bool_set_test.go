// Code generated by "setter -type=bool"; DO NOT EDIT; setter: go get github.com/baza-winner/bwcore/setter

package bwset

import (
	"fmt"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"strconv"
	"testing"
)

func TestBoolSet(t *testing.T) {
	bwtesting.BwRunTests(t, BoolSetFrom, map[string]bwtesting.TestCaseStruct{"BoolSetFrom": {
		In: []interface{}{[]bool{_BoolSetTestItemA, _BoolSetTestItemB}},
		Out: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, BoolSetFromSlice, map[string]bwtesting.TestCaseStruct{"BoolSetFromSlice": {
		In: []interface{}{[]bool{_BoolSetTestItemA, _BoolSetTestItemB}},
		Out: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, BoolSetFromSet, map[string]bwtesting.TestCaseStruct{"BoolSetFromSet": {
		In: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}},
		Out: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, BoolSet.Copy, map[string]bwtesting.TestCaseStruct{"BoolSet.Copy": {
		In: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}},
		Out: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, BoolSet.ToSlice, map[string]bwtesting.TestCaseStruct{"BoolSet.ToSlice": {
		In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}},
		Out: []interface{}{[]bool{_BoolSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, BoolSet.String, map[string]bwtesting.TestCaseStruct{"BoolSet.String": {
		In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}},
		Out: []interface{}{fmt.Sprintf("[\n  %q\n]", strconv.FormatBool(_BoolSetTestItemA))},
	}})
	bwtesting.BwRunTests(t, BoolSet.GetDataForJson, map[string]bwtesting.TestCaseStruct{"BoolSet.GetDataForJson": {
		In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{strconv.FormatBool(_BoolSetTestItemA)}},
	}})
	bwtesting.BwRunTests(t, BoolSet.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"BoolSet.ToSliceOfStrings": {
		In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{strconv.FormatBool(_BoolSetTestItemA)}},
	}})
	bwtesting.BwRunTests(t, BoolSet.Has, map[string]bwtesting.TestCaseStruct{
		"BoolSet.Has: false": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, _BoolSetTestItemB},
			Out: []interface{}{false},
		},
		"BoolSet.Has: true": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, _BoolSetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, BoolSet.HasAny, map[string]bwtesting.TestCaseStruct{
		"BoolSet.HasAny: empty": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, []bool{}},
			Out: []interface{}{false},
		},
		"BoolSet.HasAny: false": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, []bool{_BoolSetTestItemB}},
			Out: []interface{}{false},
		},
		"BoolSet.HasAny: true": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, []bool{_BoolSetTestItemA, _BoolSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, BoolSet.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"BoolSet.HasAnyOfSlice: empty": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, []bool{}},
			Out: []interface{}{false},
		},
		"BoolSet.HasAnyOfSlice: false": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, []bool{_BoolSetTestItemB}},
			Out: []interface{}{false},
		},
		"BoolSet.HasAnyOfSlice: true": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, []bool{_BoolSetTestItemA, _BoolSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, BoolSet.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"BoolSet.HasAnyOfSet: empty": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, BoolSet{}},
			Out: []interface{}{false},
		},
		"BoolSet.HasAnyOfSet: false": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, BoolSet{_BoolSetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"BoolSet.HasAnyOfSet: true": {
			In: []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, BoolSet{
				_BoolSetTestItemA: struct{}{},
				_BoolSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, BoolSet.HasEach, map[string]bwtesting.TestCaseStruct{
		"BoolSet.HasEach: empty": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, []bool{}},
			Out: []interface{}{true},
		},
		"BoolSet.HasEach: false": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, []bool{_BoolSetTestItemA, _BoolSetTestItemB}},
			Out: []interface{}{false},
		},
		"BoolSet.HasEach: true": {
			In: []interface{}{BoolSet{
				_BoolSetTestItemA: struct{}{},
				_BoolSetTestItemB: struct{}{},
			}, []bool{_BoolSetTestItemA, _BoolSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, BoolSet.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"BoolSet.HasEachOfSlice: empty": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, []bool{}},
			Out: []interface{}{true},
		},
		"BoolSet.HasEachOfSlice: false": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, []bool{_BoolSetTestItemA, _BoolSetTestItemB}},
			Out: []interface{}{false},
		},
		"BoolSet.HasEachOfSlice: true": {
			In: []interface{}{BoolSet{
				_BoolSetTestItemA: struct{}{},
				_BoolSetTestItemB: struct{}{},
			}, []bool{_BoolSetTestItemA, _BoolSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, BoolSet.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"BoolSet.HasEachOfSet: empty": {
			In:  []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, BoolSet{}},
			Out: []interface{}{true},
		},
		"BoolSet.HasEachOfSet: false": {
			In: []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, BoolSet{
				_BoolSetTestItemA: struct{}{},
				_BoolSetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"BoolSet.HasEachOfSet: true": {
			In: []interface{}{BoolSet{
				_BoolSetTestItemA: struct{}{},
				_BoolSetTestItemB: struct{}{},
			}, BoolSet{
				_BoolSetTestItemA: struct{}{},
				_BoolSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, BoolSet._AddTestHelper, map[string]bwtesting.TestCaseStruct{"BoolSet.Add": {
		In: []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, []bool{_BoolSetTestItemB}},
		Out: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, BoolSet._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"BoolSet.AddSlice": {
		In: []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, []bool{_BoolSetTestItemB}},
		Out: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, BoolSet._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"BoolSet.AddSet": {
		In: []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, BoolSet{_BoolSetTestItemB: struct{}{}}},
		Out: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, BoolSet._DelTestHelper, map[string]bwtesting.TestCaseStruct{"BoolSet.Del": {
		In: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}, []bool{_BoolSetTestItemB}},
		Out: []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, BoolSet._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"BoolSet.DelSlice": {
		In: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}, []bool{_BoolSetTestItemB}},
		Out: []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, BoolSet._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"BoolSet.DelSet": {
		In: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}, BoolSet{_BoolSetTestItemB: struct{}{}}},
		Out: []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, BoolSet.Union, map[string]bwtesting.TestCaseStruct{"BoolSet.Union": {
		In: []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}, BoolSet{_BoolSetTestItemB: struct{}{}}},
		Out: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, BoolSet.Intersect, map[string]bwtesting.TestCaseStruct{"BoolSet.Intersect": {
		In: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}, BoolSet{_BoolSetTestItemB: struct{}{}}},
		Out: []interface{}{BoolSet{_BoolSetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, BoolSet.Subtract, map[string]bwtesting.TestCaseStruct{"BoolSet.Subtract": {
		In: []interface{}{BoolSet{
			_BoolSetTestItemA: struct{}{},
			_BoolSetTestItemB: struct{}{},
		}, BoolSet{_BoolSetTestItemB: struct{}{}}},
		Out: []interface{}{BoolSet{_BoolSetTestItemA: struct{}{}}},
	}})
}
