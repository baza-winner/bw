// Code generated by "bwsetter -type=uint"; DO NOT EDIT; bwsetter: go get -type=uint -set=UintSet -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	"sort"
	"strconv"
)

// UintSet - множество значений типа uint с поддержкой интерфейсов Stringer и github.com/baza-winner/bwcore/bwjson.Jsonable
type UintSet map[uint]struct{}

// UintSetFrom - конструктор UintSet
func UintSetFrom(kk ...uint) UintSet {
	result := UintSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// UintSetFromSlice - конструктор UintSet
func UintSetFromSlice(kk []uint) UintSet {
	result := UintSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// UintSetFromSet - конструктор UintSet
func UintSetFromSet(s UintSet) UintSet {
	result := UintSet{}
	for k, _ := range s {
		result[k] = struct{}{}
	}
	return result
}

// Copy - создает независимую копию
func (v UintSet) Copy() UintSet {
	return UintSetFromSet(v)
}

// ToSlice - возвращает в виде []uint
func (v UintSet) ToSlice() []uint {
	result := _uintSlice{}
	for k, _ := range v {
		result = append(result, k)
	}
	sort.Sort(result)
	return result
}

func _UintSetToSliceTestHelper(kk []uint) []uint {
	return UintSetFromSlice(kk).ToSlice()
}

// String - поддержка интерфейса Stringer
func (v UintSet) String() string {
	return bwjson.PrettyJsonOf(v)
}

// DataForJSON - поддержка интерфейса bwjson.Jsonable
func (v UintSet) DataForJSON() interface{} {
	result := []interface{}{}
	for k, _ := range v {
		result = append(result, k)
	}
	return result
}

// ToSliceOfStrings - возвращает []string строковых представлений элементов множества
func (v UintSet) ToSliceOfStrings() []string {
	result := []string{}
	for k, _ := range v {
		result = append(result, strconv.FormatUint(uint64(k), 10))
	}
	sort.Strings(result)
	return result
}

// Has - возвращает true, если множество содержит заданный элемент, в противном случае - false
func (v UintSet) Has(k uint) bool {
	_, ok := v[k]
	return ok
}

/*
HasAny - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v UintSet) HasAny(kk ...uint) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSlice - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v UintSet) HasAnyOfSlice(kk []uint) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSet - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v UintSet) HasAnyOfSet(s UintSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasEach - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v UintSet) HasEach(kk ...uint) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSlice - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v UintSet) HasEachOfSlice(kk []uint) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSet - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v UintSet) HasEachOfSet(s UintSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

// Add - добавляет элементы в множество v
func (v UintSet) Add(kk ...uint) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v UintSet) _AddTestHelper(kk ...uint) UintSet {
	result := v.Copy()
	result.Add(kk...)
	return result
}

// AddSlice - добавляет элементы в множество v
func (v UintSet) AddSlice(kk []uint) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v UintSet) _AddSliceTestHelper(kk []uint) UintSet {
	result := v.Copy()
	result.AddSlice(kk)
	return result
}

// AddSet - добавляет элементы в множество v
func (v UintSet) AddSet(s UintSet) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

func (v UintSet) _AddSetTestHelper(s UintSet) UintSet {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Del - удаляет элементы из множествa v
func (v UintSet) Del(kk ...uint) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v UintSet) _DelTestHelper(kk ...uint) UintSet {
	result := v.Copy()
	result.Del(kk...)
	return result
}

// DelSlice - удаляет элементы из множествa v
func (v UintSet) DelSlice(kk []uint) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v UintSet) _DelSliceTestHelper(kk []uint) UintSet {
	result := v.Copy()
	result.DelSlice(kk)
	return result
}

// DelSet - удаляет элементы из множествa v
func (v UintSet) DelSet(s UintSet) {
	for k, _ := range s {
		delete(v, k)
	}
}

func (v UintSet) _DelSetTestHelper(s UintSet) UintSet {
	result := v.Copy()
	result.DelSet(s)
	return result
}

// Union - возвращает результат объединения двух множеств. Исходные множества остаются без изменений
func (v UintSet) Union(s UintSet) UintSet {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Intersect - возвращает результат пересечения двух множеств. Исходные множества остаются без изменений
func (v UintSet) Intersect(s UintSet) UintSet {
	result := UintSet{}
	for k, _ := range v {
		if _, ok := s[k]; ok {
			result[k] = struct{}{}
		}
	}
	return result
}

// Subtract - возвращает результат вычитания двух множеств. Исходные множества остаются без изменений
func (v UintSet) Subtract(s UintSet) UintSet {
	result := UintSet{}
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			result[k] = struct{}{}
		}
	}
	return result
}

type _uintSlice []uint

func (v _uintSlice) Len() int {
	return len(v)
}

func (v _uintSlice) Swap(i int, j int) {
	v[i], v[j] = v[j], v[i]
}

func (v _uintSlice) Less(i int, j int) bool {
	return v[i] < v[j]
}
