// Code generated by "bwsetter -type=float32"; DO NOT EDIT; bwsetter: go get -type=float32 -set=Float32Set -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"strconv"
	"testing"
)

func TestFloat32Set(t *testing.T) {
	bwtesting.BwRunTests(t, Float32SetFrom, map[string]bwtesting.TestCaseStruct{"Float32SetFrom": {
		In: []interface{}{[]float32{_Float32SetTestItemA, _Float32SetTestItemB}},
		Out: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float32SetFromSlice, map[string]bwtesting.TestCaseStruct{"Float32SetFromSlice": {
		In: []interface{}{[]float32{_Float32SetTestItemA, _Float32SetTestItemB}},
		Out: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float32SetFromSet, map[string]bwtesting.TestCaseStruct{"Float32SetFromSet": {
		In: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}},
		Out: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float32Set.Copy, map[string]bwtesting.TestCaseStruct{"Float32Set.Copy": {
		In: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}},
		Out: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float32Set.ToSlice, map[string]bwtesting.TestCaseStruct{"Float32Set.ToSlice": {
		In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}},
		Out: []interface{}{[]float32{_Float32SetTestItemA}},
	}})
	bwtesting.BwRunTests(t, _Float32SetToSliceTestHelper, map[string]bwtesting.TestCaseStruct{"_Float32SetToSliceTestHelper": {
		In:  []interface{}{[]float32{_Float32SetTestItemB, _Float32SetTestItemA}},
		Out: []interface{}{[]float32{_Float32SetTestItemA, _Float32SetTestItemB}},
	}})
	bwtesting.BwRunTests(t, Float32Set.String, map[string]bwtesting.TestCaseStruct{"Float32Set.String": {
		In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}},
		Out: []interface{}{bwjson.PrettyJson([]float32{_Float32SetTestItemA})},
	}})
	bwtesting.BwRunTests(t, Float32Set.DataForJSON, map[string]bwtesting.TestCaseStruct{"Float32Set.DataForJSON": {
		In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{_Float32SetTestItemA}},
	}})
	bwtesting.BwRunTests(t, Float32Set.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"Float32Set.ToSliceOfStrings": {
		In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{strconv.FormatFloat(float64(_Float32SetTestItemA), byte(0x66), -1, 64)}},
	}})
	bwtesting.BwRunTests(t, Float32Set.Has, map[string]bwtesting.TestCaseStruct{
		"Float32Set.Has: false": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, _Float32SetTestItemB},
			Out: []interface{}{false},
		},
		"Float32Set.Has: true": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, _Float32SetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float32Set.HasAny, map[string]bwtesting.TestCaseStruct{
		"Float32Set.HasAny: empty": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, []float32{}},
			Out: []interface{}{false},
		},
		"Float32Set.HasAny: false": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, []float32{_Float32SetTestItemB}},
			Out: []interface{}{false},
		},
		"Float32Set.HasAny: true": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, []float32{_Float32SetTestItemA, _Float32SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float32Set.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"Float32Set.HasAnyOfSlice: empty": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, []float32{}},
			Out: []interface{}{false},
		},
		"Float32Set.HasAnyOfSlice: false": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, []float32{_Float32SetTestItemB}},
			Out: []interface{}{false},
		},
		"Float32Set.HasAnyOfSlice: true": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, []float32{_Float32SetTestItemA, _Float32SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float32Set.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"Float32Set.HasAnyOfSet: empty": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, Float32Set{}},
			Out: []interface{}{false},
		},
		"Float32Set.HasAnyOfSet: false": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, Float32Set{_Float32SetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"Float32Set.HasAnyOfSet: true": {
			In: []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, Float32Set{
				_Float32SetTestItemA: struct{}{},
				_Float32SetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float32Set.HasEach, map[string]bwtesting.TestCaseStruct{
		"Float32Set.HasEach: empty": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, []float32{}},
			Out: []interface{}{true},
		},
		"Float32Set.HasEach: false": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, []float32{_Float32SetTestItemA, _Float32SetTestItemB}},
			Out: []interface{}{false},
		},
		"Float32Set.HasEach: true": {
			In: []interface{}{Float32Set{
				_Float32SetTestItemA: struct{}{},
				_Float32SetTestItemB: struct{}{},
			}, []float32{_Float32SetTestItemA, _Float32SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float32Set.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"Float32Set.HasEachOfSlice: empty": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, []float32{}},
			Out: []interface{}{true},
		},
		"Float32Set.HasEachOfSlice: false": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, []float32{_Float32SetTestItemA, _Float32SetTestItemB}},
			Out: []interface{}{false},
		},
		"Float32Set.HasEachOfSlice: true": {
			In: []interface{}{Float32Set{
				_Float32SetTestItemA: struct{}{},
				_Float32SetTestItemB: struct{}{},
			}, []float32{_Float32SetTestItemA, _Float32SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float32Set.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"Float32Set.HasEachOfSet: empty": {
			In:  []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, Float32Set{}},
			Out: []interface{}{true},
		},
		"Float32Set.HasEachOfSet: false": {
			In: []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, Float32Set{
				_Float32SetTestItemA: struct{}{},
				_Float32SetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"Float32Set.HasEachOfSet: true": {
			In: []interface{}{Float32Set{
				_Float32SetTestItemA: struct{}{},
				_Float32SetTestItemB: struct{}{},
			}, Float32Set{
				_Float32SetTestItemA: struct{}{},
				_Float32SetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Float32Set._AddTestHelper, map[string]bwtesting.TestCaseStruct{"Float32Set.Add": {
		In: []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, []float32{_Float32SetTestItemB}},
		Out: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float32Set._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Float32Set.AddSlice": {
		In: []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, []float32{_Float32SetTestItemB}},
		Out: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float32Set._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"Float32Set.AddSet": {
		In: []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, Float32Set{_Float32SetTestItemB: struct{}{}}},
		Out: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float32Set._DelTestHelper, map[string]bwtesting.TestCaseStruct{"Float32Set.Del": {
		In: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}, []float32{_Float32SetTestItemB}},
		Out: []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Float32Set._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Float32Set.DelSlice": {
		In: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}, []float32{_Float32SetTestItemB}},
		Out: []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Float32Set._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"Float32Set.DelSet": {
		In: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}, Float32Set{_Float32SetTestItemB: struct{}{}}},
		Out: []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Float32Set.Union, map[string]bwtesting.TestCaseStruct{"Float32Set.Union": {
		In: []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}, Float32Set{_Float32SetTestItemB: struct{}{}}},
		Out: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Float32Set.Intersect, map[string]bwtesting.TestCaseStruct{"Float32Set.Intersect": {
		In: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}, Float32Set{_Float32SetTestItemB: struct{}{}}},
		Out: []interface{}{Float32Set{_Float32SetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Float32Set.Subtract, map[string]bwtesting.TestCaseStruct{"Float32Set.Subtract": {
		In: []interface{}{Float32Set{
			_Float32SetTestItemA: struct{}{},
			_Float32SetTestItemB: struct{}{},
		}, Float32Set{_Float32SetTestItemB: struct{}{}}},
		Out: []interface{}{Float32Set{_Float32SetTestItemA: struct{}{}}},
	}})
}
