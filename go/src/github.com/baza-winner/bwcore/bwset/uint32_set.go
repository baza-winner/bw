// Code generated by "bwsetter -type=uint32"; DO NOT EDIT; bwsetter: go get -type=uint32 -set=Uint32Set -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	"sort"
	"strconv"
)

// Uint32Set - множество значений типа uint32 с поддержкой интерфейсов Stringer и github.com/baza-winner/bwcore/bwjson.Jsonable
type Uint32Set map[uint32]struct{}

// Uint32SetFrom - конструктор Uint32Set
func Uint32SetFrom(kk ...uint32) Uint32Set {
	result := Uint32Set{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// Uint32SetFromSlice - конструктор Uint32Set
func Uint32SetFromSlice(kk []uint32) Uint32Set {
	result := Uint32Set{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// Uint32SetFromSet - конструктор Uint32Set
func Uint32SetFromSet(s Uint32Set) Uint32Set {
	result := Uint32Set{}
	for k, _ := range s {
		result[k] = struct{}{}
	}
	return result
}

// Copy - создает независимую копию
func (v Uint32Set) Copy() Uint32Set {
	return Uint32SetFromSet(v)
}

// ToSlice - возвращает в виде []uint32
func (v Uint32Set) ToSlice() []uint32 {
	result := _uint32Slice{}
	for k, _ := range v {
		result = append(result, k)
	}
	sort.Sort(result)
	return result
}

func _Uint32SetToSliceTestHelper(kk []uint32) []uint32 {
	return Uint32SetFromSlice(kk).ToSlice()
}

// String - поддержка интерфейса Stringer
func (v Uint32Set) String() string {
	return bwjson.PrettyJsonOf(v)
}

// DataForJson - поддержка интерфейса bwjson.Jsonable
func (v Uint32Set) DataForJson() interface{} {
	result := []interface{}{}
	for k, _ := range v {
		result = append(result, k)
	}
	return result
}

// ToSliceOfStrings - возвращает []string строковых представлений элементов множества
func (v Uint32Set) ToSliceOfStrings() []string {
	result := []string{}
	for k, _ := range v {
		result = append(result, strconv.FormatUint(uint64(k), 10))
	}
	sort.Strings(result)
	return result
}

// Has - возвращает true, если множество содержит заданный элемент, в противном случае - false
func (v Uint32Set) Has(k uint32) bool {
	_, ok := v[k]
	return ok
}

/*
HasAny - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Uint32Set) HasAny(kk ...uint32) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSlice - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Uint32Set) HasAnyOfSlice(kk []uint32) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSet - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Uint32Set) HasAnyOfSet(s Uint32Set) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasEach - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Uint32Set) HasEach(kk ...uint32) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSlice - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Uint32Set) HasEachOfSlice(kk []uint32) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSet - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Uint32Set) HasEachOfSet(s Uint32Set) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

// Add - добавляет элементы в множество v
func (v Uint32Set) Add(kk ...uint32) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v Uint32Set) _AddTestHelper(kk ...uint32) Uint32Set {
	result := v.Copy()
	result.Add(kk...)
	return result
}

// AddSlice - добавляет элементы в множество v
func (v Uint32Set) AddSlice(kk []uint32) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v Uint32Set) _AddSliceTestHelper(kk []uint32) Uint32Set {
	result := v.Copy()
	result.AddSlice(kk)
	return result
}

// AddSet - добавляет элементы в множество v
func (v Uint32Set) AddSet(s Uint32Set) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

func (v Uint32Set) _AddSetTestHelper(s Uint32Set) Uint32Set {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Del - удаляет элементы из множествa v
func (v Uint32Set) Del(kk ...uint32) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v Uint32Set) _DelTestHelper(kk ...uint32) Uint32Set {
	result := v.Copy()
	result.Del(kk...)
	return result
}

// DelSlice - удаляет элементы из множествa v
func (v Uint32Set) DelSlice(kk []uint32) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v Uint32Set) _DelSliceTestHelper(kk []uint32) Uint32Set {
	result := v.Copy()
	result.DelSlice(kk)
	return result
}

// DelSet - удаляет элементы из множествa v
func (v Uint32Set) DelSet(s Uint32Set) {
	for k, _ := range s {
		delete(v, k)
	}
}

func (v Uint32Set) _DelSetTestHelper(s Uint32Set) Uint32Set {
	result := v.Copy()
	result.DelSet(s)
	return result
}

// Union - возвращает результат объединения двух множеств. Исходные множества остаются без изменений
func (v Uint32Set) Union(s Uint32Set) Uint32Set {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Intersect - возвращает результат пересечения двух множеств. Исходные множества остаются без изменений
func (v Uint32Set) Intersect(s Uint32Set) Uint32Set {
	result := Uint32Set{}
	for k, _ := range v {
		if _, ok := s[k]; ok {
			result[k] = struct{}{}
		}
	}
	return result
}

// Subtract - возвращает результат вычитания двух множеств. Исходные множества остаются без изменений
func (v Uint32Set) Subtract(s Uint32Set) Uint32Set {
	result := Uint32Set{}
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			result[k] = struct{}{}
		}
	}
	return result
}

type _uint32Slice []uint32

func (v _uint32Slice) Len() int {
	return len(v)
}

func (v _uint32Slice) Swap(i int, j int) {
	v[i], v[j] = v[j], v[i]
}

func (v _uint32Slice) Less(i int, j int) bool {
	return v[i] < v[j]
}
