// Code generated by "bwsetter -type=rune"; DO NOT EDIT; bwsetter: go get -type=rune -set=RuneSet -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"testing"
)

func TestRuneSet(t *testing.T) {
	bwtesting.BwRunTests(t, RuneSetFrom, map[string]bwtesting.TestCaseStruct{"RuneSetFrom": {
		In: []interface{}{[]rune{_RuneSetTestItemA, _RuneSetTestItemB}},
		Out: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RuneSetFromSlice, map[string]bwtesting.TestCaseStruct{"RuneSetFromSlice": {
		In: []interface{}{[]rune{_RuneSetTestItemA, _RuneSetTestItemB}},
		Out: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RuneSetFromSet, map[string]bwtesting.TestCaseStruct{"RuneSetFromSet": {
		In: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}},
		Out: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RuneSet.Copy, map[string]bwtesting.TestCaseStruct{"RuneSet.Copy": {
		In: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}},
		Out: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RuneSet.ToSlice, map[string]bwtesting.TestCaseStruct{"RuneSet.ToSlice": {
		In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}},
		Out: []interface{}{[]rune{_RuneSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, _RuneSetToSliceTestHelper, map[string]bwtesting.TestCaseStruct{"_RuneSetToSliceTestHelper": {
		In:  []interface{}{[]rune{_RuneSetTestItemB, _RuneSetTestItemA}},
		Out: []interface{}{[]rune{_RuneSetTestItemA, _RuneSetTestItemB}},
	}})
	bwtesting.BwRunTests(t, RuneSet.String, map[string]bwtesting.TestCaseStruct{"RuneSet.String": {
		In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}},
		Out: []interface{}{bwjson.PrettyJson([]rune{_RuneSetTestItemA})},
	}})
	bwtesting.BwRunTests(t, RuneSet.DataForJSON, map[string]bwtesting.TestCaseStruct{"RuneSet.DataForJSON": {
		In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{_RuneSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, RuneSet.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"RuneSet.ToSliceOfStrings": {
		In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{string(_RuneSetTestItemA)}},
	}})
	bwtesting.BwRunTests(t, RuneSet.Has, map[string]bwtesting.TestCaseStruct{
		"RuneSet.Has: false": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, _RuneSetTestItemB},
			Out: []interface{}{false},
		},
		"RuneSet.Has: true": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, _RuneSetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RuneSet.HasAny, map[string]bwtesting.TestCaseStruct{
		"RuneSet.HasAny: empty": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, []rune{}},
			Out: []interface{}{false},
		},
		"RuneSet.HasAny: false": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, []rune{_RuneSetTestItemB}},
			Out: []interface{}{false},
		},
		"RuneSet.HasAny: true": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, []rune{_RuneSetTestItemA, _RuneSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RuneSet.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"RuneSet.HasAnyOfSlice: empty": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, []rune{}},
			Out: []interface{}{false},
		},
		"RuneSet.HasAnyOfSlice: false": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, []rune{_RuneSetTestItemB}},
			Out: []interface{}{false},
		},
		"RuneSet.HasAnyOfSlice: true": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, []rune{_RuneSetTestItemA, _RuneSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RuneSet.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"RuneSet.HasAnyOfSet: empty": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, RuneSet{}},
			Out: []interface{}{false},
		},
		"RuneSet.HasAnyOfSet: false": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, RuneSet{_RuneSetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"RuneSet.HasAnyOfSet: true": {
			In: []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, RuneSet{
				_RuneSetTestItemA: struct{}{},
				_RuneSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RuneSet.HasEach, map[string]bwtesting.TestCaseStruct{
		"RuneSet.HasEach: empty": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, []rune{}},
			Out: []interface{}{true},
		},
		"RuneSet.HasEach: false": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, []rune{_RuneSetTestItemA, _RuneSetTestItemB}},
			Out: []interface{}{false},
		},
		"RuneSet.HasEach: true": {
			In: []interface{}{RuneSet{
				_RuneSetTestItemA: struct{}{},
				_RuneSetTestItemB: struct{}{},
			}, []rune{_RuneSetTestItemA, _RuneSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RuneSet.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"RuneSet.HasEachOfSlice: empty": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, []rune{}},
			Out: []interface{}{true},
		},
		"RuneSet.HasEachOfSlice: false": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, []rune{_RuneSetTestItemA, _RuneSetTestItemB}},
			Out: []interface{}{false},
		},
		"RuneSet.HasEachOfSlice: true": {
			In: []interface{}{RuneSet{
				_RuneSetTestItemA: struct{}{},
				_RuneSetTestItemB: struct{}{},
			}, []rune{_RuneSetTestItemA, _RuneSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RuneSet.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"RuneSet.HasEachOfSet: empty": {
			In:  []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, RuneSet{}},
			Out: []interface{}{true},
		},
		"RuneSet.HasEachOfSet: false": {
			In: []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, RuneSet{
				_RuneSetTestItemA: struct{}{},
				_RuneSetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"RuneSet.HasEachOfSet: true": {
			In: []interface{}{RuneSet{
				_RuneSetTestItemA: struct{}{},
				_RuneSetTestItemB: struct{}{},
			}, RuneSet{
				_RuneSetTestItemA: struct{}{},
				_RuneSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, RuneSet._AddTestHelper, map[string]bwtesting.TestCaseStruct{"RuneSet.Add": {
		In: []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, []rune{_RuneSetTestItemB}},
		Out: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RuneSet._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"RuneSet.AddSlice": {
		In: []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, []rune{_RuneSetTestItemB}},
		Out: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RuneSet._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"RuneSet.AddSet": {
		In: []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, RuneSet{_RuneSetTestItemB: struct{}{}}},
		Out: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RuneSet._DelTestHelper, map[string]bwtesting.TestCaseStruct{"RuneSet.Del": {
		In: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}, []rune{_RuneSetTestItemB}},
		Out: []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, RuneSet._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"RuneSet.DelSlice": {
		In: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}, []rune{_RuneSetTestItemB}},
		Out: []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, RuneSet._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"RuneSet.DelSet": {
		In: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}, RuneSet{_RuneSetTestItemB: struct{}{}}},
		Out: []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, RuneSet.Union, map[string]bwtesting.TestCaseStruct{"RuneSet.Union": {
		In: []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}, RuneSet{_RuneSetTestItemB: struct{}{}}},
		Out: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, RuneSet.Intersect, map[string]bwtesting.TestCaseStruct{"RuneSet.Intersect": {
		In: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}, RuneSet{_RuneSetTestItemB: struct{}{}}},
		Out: []interface{}{RuneSet{_RuneSetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, RuneSet.Subtract, map[string]bwtesting.TestCaseStruct{"RuneSet.Subtract": {
		In: []interface{}{RuneSet{
			_RuneSetTestItemA: struct{}{},
			_RuneSetTestItemB: struct{}{},
		}, RuneSet{_RuneSetTestItemB: struct{}{}}},
		Out: []interface{}{RuneSet{_RuneSetTestItemA: struct{}{}}},
	}})
}
