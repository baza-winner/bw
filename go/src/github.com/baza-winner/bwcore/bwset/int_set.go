// Code generated by "bwsetter -type=int"; DO NOT EDIT; bwsetter: go get -type=int -set=IntSet -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	"sort"
	"strconv"
)

// IntSet - множество значений типа int с поддержкой интерфейсов Stringer и github.com/baza-winner/bwcore/bwjson.Jsonable
type IntSet map[int]struct{}

// IntSetFrom - конструктор IntSet
func IntSetFrom(kk ...int) IntSet {
	result := IntSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// IntSetFromSlice - конструктор IntSet
func IntSetFromSlice(kk []int) IntSet {
	result := IntSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// IntSetFromSet - конструктор IntSet
func IntSetFromSet(s IntSet) IntSet {
	result := IntSet{}
	for k, _ := range s {
		result[k] = struct{}{}
	}
	return result
}

// Copy - создает независимую копию
func (v IntSet) Copy() IntSet {
	return IntSetFromSet(v)
}

// ToSlice - возвращает в виде []int
func (v IntSet) ToSlice() []int {
	result := _intSlice{}
	for k, _ := range v {
		result = append(result, k)
	}
	sort.Sort(result)
	return result
}

func _IntSetToSliceTestHelper(kk []int) []int {
	return IntSetFromSlice(kk).ToSlice()
}

// String - поддержка интерфейса Stringer
func (v IntSet) String() string {
	return bwjson.PrettyJsonOf(v)
}

// DataForJson - поддержка интерфейса bwjson.Jsonable
func (v IntSet) DataForJson() interface{} {
	result := []interface{}{}
	for k, _ := range v {
		result = append(result, k)
	}
	return result
}

// ToSliceOfStrings - возвращает []string строковых представлений элементов множества
func (v IntSet) ToSliceOfStrings() []string {
	result := []string{}
	for k, _ := range v {
		result = append(result, strconv.FormatInt(int64(k), 10))
	}
	sort.Strings(result)
	return result
}

// Has - возвращает true, если множество содержит заданный элемент, в противном случае - false
func (v IntSet) Has(k int) bool {
	_, ok := v[k]
	return ok
}

/*
HasAny - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v IntSet) HasAny(kk ...int) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSlice - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v IntSet) HasAnyOfSlice(kk []int) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSet - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v IntSet) HasAnyOfSet(s IntSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasEach - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v IntSet) HasEach(kk ...int) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSlice - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v IntSet) HasEachOfSlice(kk []int) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSet - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v IntSet) HasEachOfSet(s IntSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

// Add - добавляет элементы в множество v
func (v IntSet) Add(kk ...int) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v IntSet) _AddTestHelper(kk ...int) IntSet {
	result := v.Copy()
	result.Add(kk...)
	return result
}

// AddSlice - добавляет элементы в множество v
func (v IntSet) AddSlice(kk []int) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v IntSet) _AddSliceTestHelper(kk []int) IntSet {
	result := v.Copy()
	result.AddSlice(kk)
	return result
}

// AddSet - добавляет элементы в множество v
func (v IntSet) AddSet(s IntSet) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

func (v IntSet) _AddSetTestHelper(s IntSet) IntSet {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Del - удаляет элементы из множествa v
func (v IntSet) Del(kk ...int) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v IntSet) _DelTestHelper(kk ...int) IntSet {
	result := v.Copy()
	result.Del(kk...)
	return result
}

// DelSlice - удаляет элементы из множествa v
func (v IntSet) DelSlice(kk []int) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v IntSet) _DelSliceTestHelper(kk []int) IntSet {
	result := v.Copy()
	result.DelSlice(kk)
	return result
}

// DelSet - удаляет элементы из множествa v
func (v IntSet) DelSet(s IntSet) {
	for k, _ := range s {
		delete(v, k)
	}
}

func (v IntSet) _DelSetTestHelper(s IntSet) IntSet {
	result := v.Copy()
	result.DelSet(s)
	return result
}

// Union - возвращает результат объединения двух множеств. Исходные множества остаются без изменений
func (v IntSet) Union(s IntSet) IntSet {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Intersect - возвращает результат пересечения двух множеств. Исходные множества остаются без изменений
func (v IntSet) Intersect(s IntSet) IntSet {
	result := IntSet{}
	for k, _ := range v {
		if _, ok := s[k]; ok {
			result[k] = struct{}{}
		}
	}
	return result
}

// Subtract - возвращает результат вычитания двух множеств. Исходные множества остаются без изменений
func (v IntSet) Subtract(s IntSet) IntSet {
	result := IntSet{}
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			result[k] = struct{}{}
		}
	}
	return result
}

type _intSlice []int

func (v _intSlice) Len() int {
	return len(v)
}

func (v _intSlice) Swap(i int, j int) {
	v[i], v[j] = v[j], v[i]
}

func (v _intSlice) Less(i int, j int) bool {
	return v[i] < v[j]
}
