// Code generated by "setter -type=int32"; DO NOT EDIT; setter: go get github.com/baza-winner/bwcore/setter

package bwset

import (
	"fmt"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"strconv"
	"testing"
)

func TestInt32Set(t *testing.T) {
	bwtesting.BwRunTests(t, Int32SetFrom, map[string]bwtesting.TestCaseStruct{"Int32SetFrom": {
		In: []interface{}{[]int32{_Int32SetTestItemA, _Int32SetTestItemB}},
		Out: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int32SetFromSlice, map[string]bwtesting.TestCaseStruct{"Int32SetFromSlice": {
		In: []interface{}{[]int32{_Int32SetTestItemA, _Int32SetTestItemB}},
		Out: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int32SetFromSet, map[string]bwtesting.TestCaseStruct{"Int32SetFromSet": {
		In: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}},
		Out: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int32Set.Copy, map[string]bwtesting.TestCaseStruct{"Int32Set.Copy": {
		In: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}},
		Out: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int32Set.ToSlice, map[string]bwtesting.TestCaseStruct{"Int32Set.ToSlice": {
		In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}},
		Out: []interface{}{[]int32{_Int32SetTestItemA}},
	}})
	bwtesting.BwRunTests(t, _Int32SetToSliceTestHelper, map[string]bwtesting.TestCaseStruct{"_Int32SetToSliceTestHelper": {
		In:  []interface{}{[]int32{_Int32SetTestItemB, _Int32SetTestItemA}},
		Out: []interface{}{[]int32{_Int32SetTestItemA, _Int32SetTestItemB}},
	}})
	bwtesting.BwRunTests(t, Int32Set.String, map[string]bwtesting.TestCaseStruct{"Int32Set.String": {
		In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}},
		Out: []interface{}{fmt.Sprintf("[\n  %q\n]", strconv.FormatInt(int64(_Int32SetTestItemA), 10))},
	}})
	bwtesting.BwRunTests(t, Int32Set.GetDataForJson, map[string]bwtesting.TestCaseStruct{"Int32Set.GetDataForJson": {
		In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{strconv.FormatInt(int64(_Int32SetTestItemA), 10)}},
	}})
	bwtesting.BwRunTests(t, Int32Set.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"Int32Set.ToSliceOfStrings": {
		In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{strconv.FormatInt(int64(_Int32SetTestItemA), 10)}},
	}})
	bwtesting.BwRunTests(t, Int32Set.Has, map[string]bwtesting.TestCaseStruct{
		"Int32Set.Has: false": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, _Int32SetTestItemB},
			Out: []interface{}{false},
		},
		"Int32Set.Has: true": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, _Int32SetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int32Set.HasAny, map[string]bwtesting.TestCaseStruct{
		"Int32Set.HasAny: empty": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, []int32{}},
			Out: []interface{}{false},
		},
		"Int32Set.HasAny: false": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, []int32{_Int32SetTestItemB}},
			Out: []interface{}{false},
		},
		"Int32Set.HasAny: true": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, []int32{_Int32SetTestItemA, _Int32SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int32Set.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"Int32Set.HasAnyOfSlice: empty": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, []int32{}},
			Out: []interface{}{false},
		},
		"Int32Set.HasAnyOfSlice: false": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, []int32{_Int32SetTestItemB}},
			Out: []interface{}{false},
		},
		"Int32Set.HasAnyOfSlice: true": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, []int32{_Int32SetTestItemA, _Int32SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int32Set.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"Int32Set.HasAnyOfSet: empty": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, Int32Set{}},
			Out: []interface{}{false},
		},
		"Int32Set.HasAnyOfSet: false": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, Int32Set{_Int32SetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"Int32Set.HasAnyOfSet: true": {
			In: []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, Int32Set{
				_Int32SetTestItemA: struct{}{},
				_Int32SetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int32Set.HasEach, map[string]bwtesting.TestCaseStruct{
		"Int32Set.HasEach: empty": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, []int32{}},
			Out: []interface{}{true},
		},
		"Int32Set.HasEach: false": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, []int32{_Int32SetTestItemA, _Int32SetTestItemB}},
			Out: []interface{}{false},
		},
		"Int32Set.HasEach: true": {
			In: []interface{}{Int32Set{
				_Int32SetTestItemA: struct{}{},
				_Int32SetTestItemB: struct{}{},
			}, []int32{_Int32SetTestItemA, _Int32SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int32Set.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"Int32Set.HasEachOfSlice: empty": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, []int32{}},
			Out: []interface{}{true},
		},
		"Int32Set.HasEachOfSlice: false": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, []int32{_Int32SetTestItemA, _Int32SetTestItemB}},
			Out: []interface{}{false},
		},
		"Int32Set.HasEachOfSlice: true": {
			In: []interface{}{Int32Set{
				_Int32SetTestItemA: struct{}{},
				_Int32SetTestItemB: struct{}{},
			}, []int32{_Int32SetTestItemA, _Int32SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int32Set.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"Int32Set.HasEachOfSet: empty": {
			In:  []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, Int32Set{}},
			Out: []interface{}{true},
		},
		"Int32Set.HasEachOfSet: false": {
			In: []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, Int32Set{
				_Int32SetTestItemA: struct{}{},
				_Int32SetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"Int32Set.HasEachOfSet: true": {
			In: []interface{}{Int32Set{
				_Int32SetTestItemA: struct{}{},
				_Int32SetTestItemB: struct{}{},
			}, Int32Set{
				_Int32SetTestItemA: struct{}{},
				_Int32SetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int32Set._AddTestHelper, map[string]bwtesting.TestCaseStruct{"Int32Set.Add": {
		In: []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, []int32{_Int32SetTestItemB}},
		Out: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int32Set._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Int32Set.AddSlice": {
		In: []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, []int32{_Int32SetTestItemB}},
		Out: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int32Set._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"Int32Set.AddSet": {
		In: []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, Int32Set{_Int32SetTestItemB: struct{}{}}},
		Out: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int32Set._DelTestHelper, map[string]bwtesting.TestCaseStruct{"Int32Set.Del": {
		In: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}, []int32{_Int32SetTestItemB}},
		Out: []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int32Set._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Int32Set.DelSlice": {
		In: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}, []int32{_Int32SetTestItemB}},
		Out: []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int32Set._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"Int32Set.DelSet": {
		In: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}, Int32Set{_Int32SetTestItemB: struct{}{}}},
		Out: []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int32Set.Union, map[string]bwtesting.TestCaseStruct{"Int32Set.Union": {
		In: []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}, Int32Set{_Int32SetTestItemB: struct{}{}}},
		Out: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int32Set.Intersect, map[string]bwtesting.TestCaseStruct{"Int32Set.Intersect": {
		In: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}, Int32Set{_Int32SetTestItemB: struct{}{}}},
		Out: []interface{}{Int32Set{_Int32SetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int32Set.Subtract, map[string]bwtesting.TestCaseStruct{"Int32Set.Subtract": {
		In: []interface{}{Int32Set{
			_Int32SetTestItemA: struct{}{},
			_Int32SetTestItemB: struct{}{},
		}, Int32Set{_Int32SetTestItemB: struct{}{}}},
		Out: []interface{}{Int32Set{_Int32SetTestItemA: struct{}{}}},
	}})
}
