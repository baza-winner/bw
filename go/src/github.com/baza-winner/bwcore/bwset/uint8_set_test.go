// Code generated by "setter -type=uint8"; DO NOT EDIT; setter: go get github.com/baza-winner/bwcore/setter

package bwset

import (
	"fmt"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"strconv"
	"testing"
)

func TestUint8Set(t *testing.T) {
	bwtesting.BwRunTests(t, Uint8SetFrom, map[string]bwtesting.TestCaseStruct{"Uint8SetFrom": {
		In: []interface{}{[]uint8{_Uint8SetTestItemA, _Uint8SetTestItemB}},
		Out: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint8SetFromSlice, map[string]bwtesting.TestCaseStruct{"Uint8SetFromSlice": {
		In: []interface{}{[]uint8{_Uint8SetTestItemA, _Uint8SetTestItemB}},
		Out: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint8SetFromSet, map[string]bwtesting.TestCaseStruct{"Uint8SetFromSet": {
		In: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}},
		Out: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint8Set.Copy, map[string]bwtesting.TestCaseStruct{"Uint8Set.Copy": {
		In: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}},
		Out: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint8Set.ToSlice, map[string]bwtesting.TestCaseStruct{"Uint8Set.ToSlice": {
		In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}},
		Out: []interface{}{[]uint8{_Uint8SetTestItemA}},
	}})
	bwtesting.BwRunTests(t, _Uint8SetToSliceTestHelper, map[string]bwtesting.TestCaseStruct{"_Uint8SetToSliceTestHelper": {
		In:  []interface{}{[]uint8{_Uint8SetTestItemB, _Uint8SetTestItemA}},
		Out: []interface{}{[]uint8{_Uint8SetTestItemA, _Uint8SetTestItemB}},
	}})
	bwtesting.BwRunTests(t, Uint8Set.String, map[string]bwtesting.TestCaseStruct{"Uint8Set.String": {
		In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}},
		Out: []interface{}{fmt.Sprintf("[\n  %q\n]", strconv.FormatUint(uint64(_Uint8SetTestItemA), 10))},
	}})
	bwtesting.BwRunTests(t, Uint8Set.GetDataForJson, map[string]bwtesting.TestCaseStruct{"Uint8Set.GetDataForJson": {
		In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{strconv.FormatUint(uint64(_Uint8SetTestItemA), 10)}},
	}})
	bwtesting.BwRunTests(t, Uint8Set.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"Uint8Set.ToSliceOfStrings": {
		In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{strconv.FormatUint(uint64(_Uint8SetTestItemA), 10)}},
	}})
	bwtesting.BwRunTests(t, Uint8Set.Has, map[string]bwtesting.TestCaseStruct{
		"Uint8Set.Has: false": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, _Uint8SetTestItemB},
			Out: []interface{}{false},
		},
		"Uint8Set.Has: true": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, _Uint8SetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint8Set.HasAny, map[string]bwtesting.TestCaseStruct{
		"Uint8Set.HasAny: empty": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, []uint8{}},
			Out: []interface{}{false},
		},
		"Uint8Set.HasAny: false": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, []uint8{_Uint8SetTestItemB}},
			Out: []interface{}{false},
		},
		"Uint8Set.HasAny: true": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, []uint8{_Uint8SetTestItemA, _Uint8SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint8Set.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"Uint8Set.HasAnyOfSlice: empty": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, []uint8{}},
			Out: []interface{}{false},
		},
		"Uint8Set.HasAnyOfSlice: false": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, []uint8{_Uint8SetTestItemB}},
			Out: []interface{}{false},
		},
		"Uint8Set.HasAnyOfSlice: true": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, []uint8{_Uint8SetTestItemA, _Uint8SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint8Set.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"Uint8Set.HasAnyOfSet: empty": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, Uint8Set{}},
			Out: []interface{}{false},
		},
		"Uint8Set.HasAnyOfSet: false": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, Uint8Set{_Uint8SetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"Uint8Set.HasAnyOfSet: true": {
			In: []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, Uint8Set{
				_Uint8SetTestItemA: struct{}{},
				_Uint8SetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint8Set.HasEach, map[string]bwtesting.TestCaseStruct{
		"Uint8Set.HasEach: empty": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, []uint8{}},
			Out: []interface{}{true},
		},
		"Uint8Set.HasEach: false": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, []uint8{_Uint8SetTestItemA, _Uint8SetTestItemB}},
			Out: []interface{}{false},
		},
		"Uint8Set.HasEach: true": {
			In: []interface{}{Uint8Set{
				_Uint8SetTestItemA: struct{}{},
				_Uint8SetTestItemB: struct{}{},
			}, []uint8{_Uint8SetTestItemA, _Uint8SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint8Set.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"Uint8Set.HasEachOfSlice: empty": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, []uint8{}},
			Out: []interface{}{true},
		},
		"Uint8Set.HasEachOfSlice: false": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, []uint8{_Uint8SetTestItemA, _Uint8SetTestItemB}},
			Out: []interface{}{false},
		},
		"Uint8Set.HasEachOfSlice: true": {
			In: []interface{}{Uint8Set{
				_Uint8SetTestItemA: struct{}{},
				_Uint8SetTestItemB: struct{}{},
			}, []uint8{_Uint8SetTestItemA, _Uint8SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint8Set.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"Uint8Set.HasEachOfSet: empty": {
			In:  []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, Uint8Set{}},
			Out: []interface{}{true},
		},
		"Uint8Set.HasEachOfSet: false": {
			In: []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, Uint8Set{
				_Uint8SetTestItemA: struct{}{},
				_Uint8SetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"Uint8Set.HasEachOfSet: true": {
			In: []interface{}{Uint8Set{
				_Uint8SetTestItemA: struct{}{},
				_Uint8SetTestItemB: struct{}{},
			}, Uint8Set{
				_Uint8SetTestItemA: struct{}{},
				_Uint8SetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint8Set._AddTestHelper, map[string]bwtesting.TestCaseStruct{"Uint8Set.Add": {
		In: []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, []uint8{_Uint8SetTestItemB}},
		Out: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint8Set._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Uint8Set.AddSlice": {
		In: []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, []uint8{_Uint8SetTestItemB}},
		Out: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint8Set._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"Uint8Set.AddSet": {
		In: []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, Uint8Set{_Uint8SetTestItemB: struct{}{}}},
		Out: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint8Set._DelTestHelper, map[string]bwtesting.TestCaseStruct{"Uint8Set.Del": {
		In: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}, []uint8{_Uint8SetTestItemB}},
		Out: []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Uint8Set._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Uint8Set.DelSlice": {
		In: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}, []uint8{_Uint8SetTestItemB}},
		Out: []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Uint8Set._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"Uint8Set.DelSet": {
		In: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}, Uint8Set{_Uint8SetTestItemB: struct{}{}}},
		Out: []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Uint8Set.Union, map[string]bwtesting.TestCaseStruct{"Uint8Set.Union": {
		In: []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}, Uint8Set{_Uint8SetTestItemB: struct{}{}}},
		Out: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint8Set.Intersect, map[string]bwtesting.TestCaseStruct{"Uint8Set.Intersect": {
		In: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}, Uint8Set{_Uint8SetTestItemB: struct{}{}}},
		Out: []interface{}{Uint8Set{_Uint8SetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Uint8Set.Subtract, map[string]bwtesting.TestCaseStruct{"Uint8Set.Subtract": {
		In: []interface{}{Uint8Set{
			_Uint8SetTestItemA: struct{}{},
			_Uint8SetTestItemB: struct{}{},
		}, Uint8Set{_Uint8SetTestItemB: struct{}{}}},
		Out: []interface{}{Uint8Set{_Uint8SetTestItemA: struct{}{}}},
	}})
}
