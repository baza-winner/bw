// Code generated by "bwsetter -type=interface{}"; DO NOT EDIT; bwsetter: go get -type=interface{} -set=InterfaceSet -test -nosort%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	"sort"
)

// InterfaceSet - множество значений типа interface{} с поддержкой интерфейсов Stringer и github.com/baza-winner/bwcore/bwjson.Jsonable
type InterfaceSet map[interface{}]struct{}

// InterfaceSetFrom - конструктор InterfaceSet
func InterfaceSetFrom(kk ...interface{}) InterfaceSet {
	result := InterfaceSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// InterfaceSetFromSlice - конструктор InterfaceSet
func InterfaceSetFromSlice(kk []interface{}) InterfaceSet {
	result := InterfaceSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// InterfaceSetFromSet - конструктор InterfaceSet
func InterfaceSetFromSet(s InterfaceSet) InterfaceSet {
	result := InterfaceSet{}
	for k, _ := range s {
		result[k] = struct{}{}
	}
	return result
}

// Copy - создает независимую копию
func (v InterfaceSet) Copy() InterfaceSet {
	return InterfaceSetFromSet(v)
}

// ToSlice - возвращает в виде []interface{}
func (v InterfaceSet) ToSlice() []interface{} {
	result := []interface{}{}
	for k, _ := range v {
		result = append(result, k)
	}
	return result
}

// String - поддержка интерфейса Stringer
func (v InterfaceSet) String() string {
	return bwjson.PrettyJsonOf(v)
}

// DataForJson - поддержка интерфейса bwjson.Jsonable
func (v InterfaceSet) DataForJson() interface{} {
	result := []interface{}{}
	for k, _ := range v {
		result = append(result, k)
	}
	return result
}

// ToSliceOfStrings - возвращает []string строковых представлений элементов множества
func (v InterfaceSet) ToSliceOfStrings() []string {
	result := []string{}
	for k, _ := range v {
		result = append(result, bwjson.PrettyJson(k))
	}
	sort.Strings(result)
	return result
}

// Has - возвращает true, если множество содержит заданный элемент, в противном случае - false
func (v InterfaceSet) Has(k interface{}) bool {
	_, ok := v[k]
	return ok
}

/*
HasAny - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v InterfaceSet) HasAny(kk ...interface{}) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSlice - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v InterfaceSet) HasAnyOfSlice(kk []interface{}) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSet - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v InterfaceSet) HasAnyOfSet(s InterfaceSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasEach - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v InterfaceSet) HasEach(kk ...interface{}) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSlice - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v InterfaceSet) HasEachOfSlice(kk []interface{}) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSet - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v InterfaceSet) HasEachOfSet(s InterfaceSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

// Add - добавляет элементы в множество v
func (v InterfaceSet) Add(kk ...interface{}) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v InterfaceSet) _AddTestHelper(kk ...interface{}) InterfaceSet {
	result := v.Copy()
	result.Add(kk...)
	return result
}

// AddSlice - добавляет элементы в множество v
func (v InterfaceSet) AddSlice(kk []interface{}) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v InterfaceSet) _AddSliceTestHelper(kk []interface{}) InterfaceSet {
	result := v.Copy()
	result.AddSlice(kk)
	return result
}

// AddSet - добавляет элементы в множество v
func (v InterfaceSet) AddSet(s InterfaceSet) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

func (v InterfaceSet) _AddSetTestHelper(s InterfaceSet) InterfaceSet {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Del - удаляет элементы из множествa v
func (v InterfaceSet) Del(kk ...interface{}) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v InterfaceSet) _DelTestHelper(kk ...interface{}) InterfaceSet {
	result := v.Copy()
	result.Del(kk...)
	return result
}

// DelSlice - удаляет элементы из множествa v
func (v InterfaceSet) DelSlice(kk []interface{}) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v InterfaceSet) _DelSliceTestHelper(kk []interface{}) InterfaceSet {
	result := v.Copy()
	result.DelSlice(kk)
	return result
}

// DelSet - удаляет элементы из множествa v
func (v InterfaceSet) DelSet(s InterfaceSet) {
	for k, _ := range s {
		delete(v, k)
	}
}

func (v InterfaceSet) _DelSetTestHelper(s InterfaceSet) InterfaceSet {
	result := v.Copy()
	result.DelSet(s)
	return result
}

// Union - возвращает результат объединения двух множеств. Исходные множества остаются без изменений
func (v InterfaceSet) Union(s InterfaceSet) InterfaceSet {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Intersect - возвращает результат пересечения двух множеств. Исходные множества остаются без изменений
func (v InterfaceSet) Intersect(s InterfaceSet) InterfaceSet {
	result := InterfaceSet{}
	for k, _ := range v {
		if _, ok := s[k]; ok {
			result[k] = struct{}{}
		}
	}
	return result
}

// Subtract - возвращает результат вычитания двух множеств. Исходные множества остаются без изменений
func (v InterfaceSet) Subtract(s InterfaceSet) InterfaceSet {
	result := InterfaceSet{}
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			result[k] = struct{}{}
		}
	}
	return result
}
