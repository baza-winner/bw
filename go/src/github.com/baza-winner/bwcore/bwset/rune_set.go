// Code generated by "bwsetter -type=rune"; DO NOT EDIT; bwsetter: go get -type=rune -set=RuneSet -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	"sort"
)

// RuneSet - множество значений типа rune с поддержкой интерфейсов Stringer и github.com/baza-winner/bwcore/bwjson.Jsonable
type RuneSet map[rune]struct{}

// RuneSetFrom - конструктор RuneSet
func RuneSetFrom(kk ...rune) RuneSet {
	result := RuneSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// RuneSetFromSlice - конструктор RuneSet
func RuneSetFromSlice(kk []rune) RuneSet {
	result := RuneSet{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// RuneSetFromSet - конструктор RuneSet
func RuneSetFromSet(s RuneSet) RuneSet {
	result := RuneSet{}
	for k, _ := range s {
		result[k] = struct{}{}
	}
	return result
}

// Copy - создает независимую копию
func (v RuneSet) Copy() RuneSet {
	return RuneSetFromSet(v)
}

// ToSlice - возвращает в виде []rune
func (v RuneSet) ToSlice() []rune {
	result := _runeSlice{}
	for k, _ := range v {
		result = append(result, k)
	}
	sort.Sort(result)
	return result
}

func _RuneSetToSliceTestHelper(kk []rune) []rune {
	return RuneSetFromSlice(kk).ToSlice()
}

// String - поддержка интерфейса Stringer
func (v RuneSet) String() string {
	return bwjson.PrettyJsonOf(v)
}

// DataForJson - поддержка интерфейса bwjson.Jsonable
func (v RuneSet) DataForJson() interface{} {
	result := []interface{}{}
	for k, _ := range v {
		result = append(result, k)
	}
	return result
}

// ToSliceOfStrings - возвращает []string строковых представлений элементов множества
func (v RuneSet) ToSliceOfStrings() []string {
	result := []string{}
	for k, _ := range v {
		result = append(result, string(k))
	}
	sort.Strings(result)
	return result
}

// Has - возвращает true, если множество содержит заданный элемент, в противном случае - false
func (v RuneSet) Has(k rune) bool {
	_, ok := v[k]
	return ok
}

/*
HasAny - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v RuneSet) HasAny(kk ...rune) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSlice - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v RuneSet) HasAnyOfSlice(kk []rune) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSet - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v RuneSet) HasAnyOfSet(s RuneSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasEach - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v RuneSet) HasEach(kk ...rune) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSlice - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v RuneSet) HasEachOfSlice(kk []rune) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSet - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v RuneSet) HasEachOfSet(s RuneSet) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

// Add - добавляет элементы в множество v
func (v RuneSet) Add(kk ...rune) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v RuneSet) _AddTestHelper(kk ...rune) RuneSet {
	result := v.Copy()
	result.Add(kk...)
	return result
}

// AddSlice - добавляет элементы в множество v
func (v RuneSet) AddSlice(kk []rune) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v RuneSet) _AddSliceTestHelper(kk []rune) RuneSet {
	result := v.Copy()
	result.AddSlice(kk)
	return result
}

// AddSet - добавляет элементы в множество v
func (v RuneSet) AddSet(s RuneSet) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

func (v RuneSet) _AddSetTestHelper(s RuneSet) RuneSet {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Del - удаляет элементы из множествa v
func (v RuneSet) Del(kk ...rune) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v RuneSet) _DelTestHelper(kk ...rune) RuneSet {
	result := v.Copy()
	result.Del(kk...)
	return result
}

// DelSlice - удаляет элементы из множествa v
func (v RuneSet) DelSlice(kk []rune) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v RuneSet) _DelSliceTestHelper(kk []rune) RuneSet {
	result := v.Copy()
	result.DelSlice(kk)
	return result
}

// DelSet - удаляет элементы из множествa v
func (v RuneSet) DelSet(s RuneSet) {
	for k, _ := range s {
		delete(v, k)
	}
}

func (v RuneSet) _DelSetTestHelper(s RuneSet) RuneSet {
	result := v.Copy()
	result.DelSet(s)
	return result
}

// Union - возвращает результат объединения двух множеств. Исходные множества остаются без изменений
func (v RuneSet) Union(s RuneSet) RuneSet {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Intersect - возвращает результат пересечения двух множеств. Исходные множества остаются без изменений
func (v RuneSet) Intersect(s RuneSet) RuneSet {
	result := RuneSet{}
	for k, _ := range v {
		if _, ok := s[k]; ok {
			result[k] = struct{}{}
		}
	}
	return result
}

// Subtract - возвращает результат вычитания двух множеств. Исходные множества остаются без изменений
func (v RuneSet) Subtract(s RuneSet) RuneSet {
	result := RuneSet{}
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			result[k] = struct{}{}
		}
	}
	return result
}

type _runeSlice []rune

func (v _runeSlice) Len() int {
	return len(v)
}

func (v _runeSlice) Swap(i int, j int) {
	v[i], v[j] = v[j], v[i]
}

func (v _runeSlice) Less(i int, j int) bool {
	return v[i] < v[j]
}
