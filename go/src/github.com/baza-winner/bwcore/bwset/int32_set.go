// Code generated by "setter -type=int32"; DO NOT EDIT; setter: go get github.com/baza-winner/bwcore/setter

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	"sort"
	"strconv"
)

// Int32Set - множество значений типа int32 с поддержкой интерфейсов Stringer и github.com/baza-winner/bwcore/bwjson.Jsonable
type Int32Set map[int32]struct{}

// Int32SetFrom - конструктор Int32Set
func Int32SetFrom(kk ...int32) Int32Set {
	result := Int32Set{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// Int32SetFromSlice - конструктор Int32Set
func Int32SetFromSlice(kk []int32) Int32Set {
	result := Int32Set{}
	for _, k := range kk {
		result[k] = struct{}{}
	}
	return result
}

// Int32SetFromSet - конструктор Int32Set
func Int32SetFromSet(s Int32Set) Int32Set {
	result := Int32Set{}
	for k, _ := range s {
		result[k] = struct{}{}
	}
	return result
}

// Copy - создает независимую копию
func (v Int32Set) Copy() Int32Set {
	return Int32SetFromSet(v)
}

// ToSlice - возвращает в виде []int32
func (v Int32Set) ToSlice() []int32 {
	result := _int32Slice{}
	for k, _ := range v {
		result = append(result, k)
	}
	sort.Sort(result)
	return result
}

func _Int32SetToSliceTestHelper(kk []int32) []int32 {
	return Int32SetFromSlice(kk).ToSlice()
}

// String - поддержка интерфейса Stringer
func (v Int32Set) String() string {
	return bwjson.PrettyJsonOf(v)
}

// GetDataForJson - поддержка интерфейса bwjson.Jsonable
func (v Int32Set) GetDataForJson() interface{} {
	result := []interface{}{}
	for k, _ := range v {
		result = append(result, strconv.FormatInt(int64(k), 10))
	}
	return result
}

// ToSliceOfStrings - возвращает []string строковых представлений элементов множества
func (v Int32Set) ToSliceOfStrings() []string {
	result := []string{}
	for k, _ := range v {
		result = append(result, strconv.FormatInt(int64(k), 10))
	}
	sort.Strings(result)
	return result
}

// Has - возвращает true, если множество содержит заданный элемент, в противном случае - false
func (v Int32Set) Has(k int32) bool {
	_, ok := v[k]
	return ok
}

/*
HasAny - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Int32Set) HasAny(kk ...int32) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSlice - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Int32Set) HasAnyOfSlice(kk []int32) bool {
	for _, k := range kk {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasAnyOfSet - возвращает true, если множество содержит хотя бы один из заданныx элементов, в противном случае - false.
HasAny(<пустой набор/множесто>) возвращает false
*/
func (v Int32Set) HasAnyOfSet(s Int32Set) bool {
	for k, _ := range s {
		if _, ok := v[k]; ok {
			return true
		}
	}
	return false
}

/*
HasEach - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Int32Set) HasEach(kk ...int32) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSlice - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Int32Set) HasEachOfSlice(kk []int32) bool {
	for _, k := range kk {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

/*
HasEachOfSet - возвращает true, если множество содержит все заданные элементы, в противном случае - false.
HasEach(<пустой набор/множесто>) возвращает true
*/
func (v Int32Set) HasEachOfSet(s Int32Set) bool {
	for k, _ := range s {
		if _, ok := v[k]; !ok {
			return false
		}
	}
	return true
}

// Add - добавляет элементы в множество v
func (v Int32Set) Add(kk ...int32) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v Int32Set) _AddTestHelper(kk ...int32) Int32Set {
	result := v.Copy()
	result.Add(kk...)
	return result
}

// AddSlice - добавляет элементы в множество v
func (v Int32Set) AddSlice(kk []int32) {
	for _, k := range kk {
		v[k] = struct{}{}
	}
}

func (v Int32Set) _AddSliceTestHelper(kk []int32) Int32Set {
	result := v.Copy()
	result.AddSlice(kk)
	return result
}

// AddSet - добавляет элементы в множество v
func (v Int32Set) AddSet(s Int32Set) {
	for k, _ := range s {
		v[k] = struct{}{}
	}
}

func (v Int32Set) _AddSetTestHelper(s Int32Set) Int32Set {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Del - удаляет элементы из множествa v
func (v Int32Set) Del(kk ...int32) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v Int32Set) _DelTestHelper(kk ...int32) Int32Set {
	result := v.Copy()
	result.Del(kk...)
	return result
}

// DelSlice - удаляет элементы из множествa v
func (v Int32Set) DelSlice(kk []int32) {
	for _, k := range kk {
		delete(v, k)
	}
}

func (v Int32Set) _DelSliceTestHelper(kk []int32) Int32Set {
	result := v.Copy()
	result.DelSlice(kk)
	return result
}

// DelSet - удаляет элементы из множествa v
func (v Int32Set) DelSet(s Int32Set) {
	for k, _ := range s {
		delete(v, k)
	}
}

func (v Int32Set) _DelSetTestHelper(s Int32Set) Int32Set {
	result := v.Copy()
	result.DelSet(s)
	return result
}

// Union - возвращает результат объединения двух множеств. Исходные множества остаются без изменений
func (v Int32Set) Union(s Int32Set) Int32Set {
	result := v.Copy()
	result.AddSet(s)
	return result
}

// Intersect - возвращает результат пересечения двух множеств. Исходные множества остаются без изменений
func (v Int32Set) Intersect(s Int32Set) Int32Set {
	result := Int32Set{}
	for k, _ := range v {
		if _, ok := s[k]; ok {
			result[k] = struct{}{}
		}
	}
	return result
}

// Subtract - возвращает результат вычитания двух множеств. Исходные множества остаются без изменений
func (v Int32Set) Subtract(s Int32Set) Int32Set {
	result := Int32Set{}
	for k, _ := range v {
		if _, ok := s[k]; !ok {
			result[k] = struct{}{}
		}
	}
	return result
}

type _int32Slice []int32

func (v _int32Slice) Len() int {
	return len(v)
}

func (v _int32Slice) Swap(i int, j int) {
	v[i], v[j] = v[j], v[i]
}

func (v _int32Slice) Less(i int, j int) bool {
	return v[i] < v[j]
}
