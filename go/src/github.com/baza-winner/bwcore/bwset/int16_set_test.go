// Code generated by "setter -type=int16"; DO NOT EDIT; setter: go get github.com/baza-winner/bwcore/setter

package bwset

import (
	"fmt"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"strconv"
	"testing"
)

func TestInt16Set(t *testing.T) {
	bwtesting.BwRunTests(t, Int16SetFrom, map[string]bwtesting.TestCaseStruct{"Int16SetFrom": {
		In: []interface{}{[]int16{_Int16SetTestItemA, _Int16SetTestItemB}},
		Out: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int16SetFromSlice, map[string]bwtesting.TestCaseStruct{"Int16SetFromSlice": {
		In: []interface{}{[]int16{_Int16SetTestItemA, _Int16SetTestItemB}},
		Out: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int16SetFromSet, map[string]bwtesting.TestCaseStruct{"Int16SetFromSet": {
		In: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}},
		Out: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int16Set.Copy, map[string]bwtesting.TestCaseStruct{"Int16Set.Copy": {
		In: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}},
		Out: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int16Set.ToSlice, map[string]bwtesting.TestCaseStruct{"Int16Set.ToSlice": {
		In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}},
		Out: []interface{}{[]int16{_Int16SetTestItemA}},
	}})
	bwtesting.BwRunTests(t, _Int16SetToSliceTestHelper, map[string]bwtesting.TestCaseStruct{"_Int16SetToSliceTestHelper": {
		In:  []interface{}{[]int16{_Int16SetTestItemB, _Int16SetTestItemA}},
		Out: []interface{}{[]int16{_Int16SetTestItemA, _Int16SetTestItemB}},
	}})
	bwtesting.BwRunTests(t, Int16Set.String, map[string]bwtesting.TestCaseStruct{"Int16Set.String": {
		In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}},
		Out: []interface{}{fmt.Sprintf("[\n  %q\n]", strconv.FormatInt(int64(_Int16SetTestItemA), 10))},
	}})
	bwtesting.BwRunTests(t, Int16Set.GetDataForJson, map[string]bwtesting.TestCaseStruct{"Int16Set.GetDataForJson": {
		In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{strconv.FormatInt(int64(_Int16SetTestItemA), 10)}},
	}})
	bwtesting.BwRunTests(t, Int16Set.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"Int16Set.ToSliceOfStrings": {
		In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{strconv.FormatInt(int64(_Int16SetTestItemA), 10)}},
	}})
	bwtesting.BwRunTests(t, Int16Set.Has, map[string]bwtesting.TestCaseStruct{
		"Int16Set.Has: false": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, _Int16SetTestItemB},
			Out: []interface{}{false},
		},
		"Int16Set.Has: true": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, _Int16SetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int16Set.HasAny, map[string]bwtesting.TestCaseStruct{
		"Int16Set.HasAny: empty": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, []int16{}},
			Out: []interface{}{false},
		},
		"Int16Set.HasAny: false": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, []int16{_Int16SetTestItemB}},
			Out: []interface{}{false},
		},
		"Int16Set.HasAny: true": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, []int16{_Int16SetTestItemA, _Int16SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int16Set.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"Int16Set.HasAnyOfSlice: empty": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, []int16{}},
			Out: []interface{}{false},
		},
		"Int16Set.HasAnyOfSlice: false": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, []int16{_Int16SetTestItemB}},
			Out: []interface{}{false},
		},
		"Int16Set.HasAnyOfSlice: true": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, []int16{_Int16SetTestItemA, _Int16SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int16Set.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"Int16Set.HasAnyOfSet: empty": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, Int16Set{}},
			Out: []interface{}{false},
		},
		"Int16Set.HasAnyOfSet: false": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, Int16Set{_Int16SetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"Int16Set.HasAnyOfSet: true": {
			In: []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, Int16Set{
				_Int16SetTestItemA: struct{}{},
				_Int16SetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int16Set.HasEach, map[string]bwtesting.TestCaseStruct{
		"Int16Set.HasEach: empty": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, []int16{}},
			Out: []interface{}{true},
		},
		"Int16Set.HasEach: false": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, []int16{_Int16SetTestItemA, _Int16SetTestItemB}},
			Out: []interface{}{false},
		},
		"Int16Set.HasEach: true": {
			In: []interface{}{Int16Set{
				_Int16SetTestItemA: struct{}{},
				_Int16SetTestItemB: struct{}{},
			}, []int16{_Int16SetTestItemA, _Int16SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int16Set.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"Int16Set.HasEachOfSlice: empty": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, []int16{}},
			Out: []interface{}{true},
		},
		"Int16Set.HasEachOfSlice: false": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, []int16{_Int16SetTestItemA, _Int16SetTestItemB}},
			Out: []interface{}{false},
		},
		"Int16Set.HasEachOfSlice: true": {
			In: []interface{}{Int16Set{
				_Int16SetTestItemA: struct{}{},
				_Int16SetTestItemB: struct{}{},
			}, []int16{_Int16SetTestItemA, _Int16SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int16Set.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"Int16Set.HasEachOfSet: empty": {
			In:  []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, Int16Set{}},
			Out: []interface{}{true},
		},
		"Int16Set.HasEachOfSet: false": {
			In: []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, Int16Set{
				_Int16SetTestItemA: struct{}{},
				_Int16SetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"Int16Set.HasEachOfSet: true": {
			In: []interface{}{Int16Set{
				_Int16SetTestItemA: struct{}{},
				_Int16SetTestItemB: struct{}{},
			}, Int16Set{
				_Int16SetTestItemA: struct{}{},
				_Int16SetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int16Set._AddTestHelper, map[string]bwtesting.TestCaseStruct{"Int16Set.Add": {
		In: []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, []int16{_Int16SetTestItemB}},
		Out: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int16Set._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Int16Set.AddSlice": {
		In: []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, []int16{_Int16SetTestItemB}},
		Out: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int16Set._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"Int16Set.AddSet": {
		In: []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, Int16Set{_Int16SetTestItemB: struct{}{}}},
		Out: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int16Set._DelTestHelper, map[string]bwtesting.TestCaseStruct{"Int16Set.Del": {
		In: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}, []int16{_Int16SetTestItemB}},
		Out: []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int16Set._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Int16Set.DelSlice": {
		In: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}, []int16{_Int16SetTestItemB}},
		Out: []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int16Set._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"Int16Set.DelSet": {
		In: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}, Int16Set{_Int16SetTestItemB: struct{}{}}},
		Out: []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int16Set.Union, map[string]bwtesting.TestCaseStruct{"Int16Set.Union": {
		In: []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}, Int16Set{_Int16SetTestItemB: struct{}{}}},
		Out: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int16Set.Intersect, map[string]bwtesting.TestCaseStruct{"Int16Set.Intersect": {
		In: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}, Int16Set{_Int16SetTestItemB: struct{}{}}},
		Out: []interface{}{Int16Set{_Int16SetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int16Set.Subtract, map[string]bwtesting.TestCaseStruct{"Int16Set.Subtract": {
		In: []interface{}{Int16Set{
			_Int16SetTestItemA: struct{}{},
			_Int16SetTestItemB: struct{}{},
		}, Int16Set{_Int16SetTestItemB: struct{}{}}},
		Out: []interface{}{Int16Set{_Int16SetTestItemA: struct{}{}}},
	}})
}
