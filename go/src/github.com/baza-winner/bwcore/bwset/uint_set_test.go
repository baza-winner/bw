// Code generated by "bwsetter -type=uint"; DO NOT EDIT; bwsetter: go get -type=uint -set=UintSet -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"strconv"
	"testing"
)

func TestUintSet(t *testing.T) {
	bwtesting.BwRunTests(t, UintSetFrom, map[string]bwtesting.TestCaseStruct{"UintSetFrom": {
		In: []interface{}{[]uint{_UintSetTestItemA, _UintSetTestItemB}},
		Out: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, UintSetFromSlice, map[string]bwtesting.TestCaseStruct{"UintSetFromSlice": {
		In: []interface{}{[]uint{_UintSetTestItemA, _UintSetTestItemB}},
		Out: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, UintSetFromSet, map[string]bwtesting.TestCaseStruct{"UintSetFromSet": {
		In: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}},
		Out: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, UintSet.Copy, map[string]bwtesting.TestCaseStruct{"UintSet.Copy": {
		In: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}},
		Out: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, UintSet.ToSlice, map[string]bwtesting.TestCaseStruct{"UintSet.ToSlice": {
		In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}},
		Out: []interface{}{[]uint{_UintSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, _UintSetToSliceTestHelper, map[string]bwtesting.TestCaseStruct{"_UintSetToSliceTestHelper": {
		In:  []interface{}{[]uint{_UintSetTestItemB, _UintSetTestItemA}},
		Out: []interface{}{[]uint{_UintSetTestItemA, _UintSetTestItemB}},
	}})
	bwtesting.BwRunTests(t, UintSet.String, map[string]bwtesting.TestCaseStruct{"UintSet.String": {
		In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}},
		Out: []interface{}{bwjson.PrettyJson([]uint{_UintSetTestItemA})},
	}})
	bwtesting.BwRunTests(t, UintSet.DataForJson, map[string]bwtesting.TestCaseStruct{"UintSet.DataForJson": {
		In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{_UintSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, UintSet.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"UintSet.ToSliceOfStrings": {
		In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{strconv.FormatUint(uint64(_UintSetTestItemA), 10)}},
	}})
	bwtesting.BwRunTests(t, UintSet.Has, map[string]bwtesting.TestCaseStruct{
		"UintSet.Has: false": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, _UintSetTestItemB},
			Out: []interface{}{false},
		},
		"UintSet.Has: true": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, _UintSetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, UintSet.HasAny, map[string]bwtesting.TestCaseStruct{
		"UintSet.HasAny: empty": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, []uint{}},
			Out: []interface{}{false},
		},
		"UintSet.HasAny: false": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, []uint{_UintSetTestItemB}},
			Out: []interface{}{false},
		},
		"UintSet.HasAny: true": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, []uint{_UintSetTestItemA, _UintSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, UintSet.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"UintSet.HasAnyOfSlice: empty": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, []uint{}},
			Out: []interface{}{false},
		},
		"UintSet.HasAnyOfSlice: false": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, []uint{_UintSetTestItemB}},
			Out: []interface{}{false},
		},
		"UintSet.HasAnyOfSlice: true": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, []uint{_UintSetTestItemA, _UintSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, UintSet.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"UintSet.HasAnyOfSet: empty": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, UintSet{}},
			Out: []interface{}{false},
		},
		"UintSet.HasAnyOfSet: false": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, UintSet{_UintSetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"UintSet.HasAnyOfSet: true": {
			In: []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, UintSet{
				_UintSetTestItemA: struct{}{},
				_UintSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, UintSet.HasEach, map[string]bwtesting.TestCaseStruct{
		"UintSet.HasEach: empty": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, []uint{}},
			Out: []interface{}{true},
		},
		"UintSet.HasEach: false": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, []uint{_UintSetTestItemA, _UintSetTestItemB}},
			Out: []interface{}{false},
		},
		"UintSet.HasEach: true": {
			In: []interface{}{UintSet{
				_UintSetTestItemA: struct{}{},
				_UintSetTestItemB: struct{}{},
			}, []uint{_UintSetTestItemA, _UintSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, UintSet.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"UintSet.HasEachOfSlice: empty": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, []uint{}},
			Out: []interface{}{true},
		},
		"UintSet.HasEachOfSlice: false": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, []uint{_UintSetTestItemA, _UintSetTestItemB}},
			Out: []interface{}{false},
		},
		"UintSet.HasEachOfSlice: true": {
			In: []interface{}{UintSet{
				_UintSetTestItemA: struct{}{},
				_UintSetTestItemB: struct{}{},
			}, []uint{_UintSetTestItemA, _UintSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, UintSet.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"UintSet.HasEachOfSet: empty": {
			In:  []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, UintSet{}},
			Out: []interface{}{true},
		},
		"UintSet.HasEachOfSet: false": {
			In: []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, UintSet{
				_UintSetTestItemA: struct{}{},
				_UintSetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"UintSet.HasEachOfSet: true": {
			In: []interface{}{UintSet{
				_UintSetTestItemA: struct{}{},
				_UintSetTestItemB: struct{}{},
			}, UintSet{
				_UintSetTestItemA: struct{}{},
				_UintSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, UintSet._AddTestHelper, map[string]bwtesting.TestCaseStruct{"UintSet.Add": {
		In: []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, []uint{_UintSetTestItemB}},
		Out: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, UintSet._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"UintSet.AddSlice": {
		In: []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, []uint{_UintSetTestItemB}},
		Out: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, UintSet._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"UintSet.AddSet": {
		In: []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, UintSet{_UintSetTestItemB: struct{}{}}},
		Out: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, UintSet._DelTestHelper, map[string]bwtesting.TestCaseStruct{"UintSet.Del": {
		In: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}, []uint{_UintSetTestItemB}},
		Out: []interface{}{UintSet{_UintSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, UintSet._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"UintSet.DelSlice": {
		In: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}, []uint{_UintSetTestItemB}},
		Out: []interface{}{UintSet{_UintSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, UintSet._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"UintSet.DelSet": {
		In: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}, UintSet{_UintSetTestItemB: struct{}{}}},
		Out: []interface{}{UintSet{_UintSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, UintSet.Union, map[string]bwtesting.TestCaseStruct{"UintSet.Union": {
		In: []interface{}{UintSet{_UintSetTestItemA: struct{}{}}, UintSet{_UintSetTestItemB: struct{}{}}},
		Out: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, UintSet.Intersect, map[string]bwtesting.TestCaseStruct{"UintSet.Intersect": {
		In: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}, UintSet{_UintSetTestItemB: struct{}{}}},
		Out: []interface{}{UintSet{_UintSetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, UintSet.Subtract, map[string]bwtesting.TestCaseStruct{"UintSet.Subtract": {
		In: []interface{}{UintSet{
			_UintSetTestItemA: struct{}{},
			_UintSetTestItemB: struct{}{},
		}, UintSet{_UintSetTestItemB: struct{}{}}},
		Out: []interface{}{UintSet{_UintSetTestItemA: struct{}{}}},
	}})
}
