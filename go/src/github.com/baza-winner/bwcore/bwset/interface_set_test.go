// Code generated by "bwsetter -type=interface{}"; DO NOT EDIT; bwsetter: go get -type=interface{} -set=InterfaceSet -test -nosort%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"testing"
)

func TestInterfaceSet(t *testing.T) {
	bwtesting.BwRunTests(t, InterfaceSetFrom, map[string]bwtesting.TestCaseStruct{"InterfaceSetFrom": {
		In: []interface{}{[]interface{}{_InterfaceSetTestItemA, _InterfaceSetTestItemB}},
		Out: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, InterfaceSetFromSlice, map[string]bwtesting.TestCaseStruct{"InterfaceSetFromSlice": {
		In: []interface{}{[]interface{}{_InterfaceSetTestItemA, _InterfaceSetTestItemB}},
		Out: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, InterfaceSetFromSet, map[string]bwtesting.TestCaseStruct{"InterfaceSetFromSet": {
		In: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}},
		Out: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet.Copy, map[string]bwtesting.TestCaseStruct{"InterfaceSet.Copy": {
		In: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}},
		Out: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet.ToSlice, map[string]bwtesting.TestCaseStruct{"InterfaceSet.ToSlice": {
		In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{_InterfaceSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet.String, map[string]bwtesting.TestCaseStruct{"InterfaceSet.String": {
		In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}},
		Out: []interface{}{bwjson.PrettyJson([]interface{}{_InterfaceSetTestItemA})},
	}})
	bwtesting.BwRunTests(t, InterfaceSet.DataForJson, map[string]bwtesting.TestCaseStruct{"InterfaceSet.DataForJson": {
		In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{_InterfaceSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"InterfaceSet.ToSliceOfStrings": {
		In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{bwjson.PrettyJson(_InterfaceSetTestItemA)}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet.Has, map[string]bwtesting.TestCaseStruct{
		"InterfaceSet.Has: false": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, _InterfaceSetTestItemB},
			Out: []interface{}{false},
		},
		"InterfaceSet.Has: true": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, _InterfaceSetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, InterfaceSet.HasAny, map[string]bwtesting.TestCaseStruct{
		"InterfaceSet.HasAny: empty": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, []interface{}{}},
			Out: []interface{}{false},
		},
		"InterfaceSet.HasAny: false": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, []interface{}{_InterfaceSetTestItemB}},
			Out: []interface{}{false},
		},
		"InterfaceSet.HasAny: true": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, []interface{}{_InterfaceSetTestItemA, _InterfaceSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, InterfaceSet.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"InterfaceSet.HasAnyOfSlice: empty": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, []interface{}{}},
			Out: []interface{}{false},
		},
		"InterfaceSet.HasAnyOfSlice: false": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, []interface{}{_InterfaceSetTestItemB}},
			Out: []interface{}{false},
		},
		"InterfaceSet.HasAnyOfSlice: true": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, []interface{}{_InterfaceSetTestItemA, _InterfaceSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, InterfaceSet.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"InterfaceSet.HasAnyOfSet: empty": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, InterfaceSet{}},
			Out: []interface{}{false},
		},
		"InterfaceSet.HasAnyOfSet: false": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, InterfaceSet{_InterfaceSetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"InterfaceSet.HasAnyOfSet: true": {
			In: []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, InterfaceSet{
				_InterfaceSetTestItemA: struct{}{},
				_InterfaceSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, InterfaceSet.HasEach, map[string]bwtesting.TestCaseStruct{
		"InterfaceSet.HasEach: empty": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, []interface{}{}},
			Out: []interface{}{true},
		},
		"InterfaceSet.HasEach: false": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, []interface{}{_InterfaceSetTestItemA, _InterfaceSetTestItemB}},
			Out: []interface{}{false},
		},
		"InterfaceSet.HasEach: true": {
			In: []interface{}{InterfaceSet{
				_InterfaceSetTestItemA: struct{}{},
				_InterfaceSetTestItemB: struct{}{},
			}, []interface{}{_InterfaceSetTestItemA, _InterfaceSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, InterfaceSet.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"InterfaceSet.HasEachOfSlice: empty": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, []interface{}{}},
			Out: []interface{}{true},
		},
		"InterfaceSet.HasEachOfSlice: false": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, []interface{}{_InterfaceSetTestItemA, _InterfaceSetTestItemB}},
			Out: []interface{}{false},
		},
		"InterfaceSet.HasEachOfSlice: true": {
			In: []interface{}{InterfaceSet{
				_InterfaceSetTestItemA: struct{}{},
				_InterfaceSetTestItemB: struct{}{},
			}, []interface{}{_InterfaceSetTestItemA, _InterfaceSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, InterfaceSet.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"InterfaceSet.HasEachOfSet: empty": {
			In:  []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, InterfaceSet{}},
			Out: []interface{}{true},
		},
		"InterfaceSet.HasEachOfSet: false": {
			In: []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, InterfaceSet{
				_InterfaceSetTestItemA: struct{}{},
				_InterfaceSetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"InterfaceSet.HasEachOfSet: true": {
			In: []interface{}{InterfaceSet{
				_InterfaceSetTestItemA: struct{}{},
				_InterfaceSetTestItemB: struct{}{},
			}, InterfaceSet{
				_InterfaceSetTestItemA: struct{}{},
				_InterfaceSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, InterfaceSet._AddTestHelper, map[string]bwtesting.TestCaseStruct{"InterfaceSet.Add": {
		In: []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, []interface{}{_InterfaceSetTestItemB}},
		Out: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"InterfaceSet.AddSlice": {
		In: []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, []interface{}{_InterfaceSetTestItemB}},
		Out: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"InterfaceSet.AddSet": {
		In: []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, InterfaceSet{_InterfaceSetTestItemB: struct{}{}}},
		Out: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet._DelTestHelper, map[string]bwtesting.TestCaseStruct{"InterfaceSet.Del": {
		In: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}, []interface{}{_InterfaceSetTestItemB}},
		Out: []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"InterfaceSet.DelSlice": {
		In: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}, []interface{}{_InterfaceSetTestItemB}},
		Out: []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"InterfaceSet.DelSet": {
		In: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}, InterfaceSet{_InterfaceSetTestItemB: struct{}{}}},
		Out: []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet.Union, map[string]bwtesting.TestCaseStruct{"InterfaceSet.Union": {
		In: []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}, InterfaceSet{_InterfaceSetTestItemB: struct{}{}}},
		Out: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet.Intersect, map[string]bwtesting.TestCaseStruct{"InterfaceSet.Intersect": {
		In: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}, InterfaceSet{_InterfaceSetTestItemB: struct{}{}}},
		Out: []interface{}{InterfaceSet{_InterfaceSetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, InterfaceSet.Subtract, map[string]bwtesting.TestCaseStruct{"InterfaceSet.Subtract": {
		In: []interface{}{InterfaceSet{
			_InterfaceSetTestItemA: struct{}{},
			_InterfaceSetTestItemB: struct{}{},
		}, InterfaceSet{_InterfaceSetTestItemB: struct{}{}}},
		Out: []interface{}{InterfaceSet{_InterfaceSetTestItemA: struct{}{}}},
	}})
}
