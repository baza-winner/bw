// Code generated by "bwsetter -type=int8"; DO NOT EDIT; bwsetter: go get -type=int8 -set=Int8Set -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"strconv"
	"testing"
)

func TestInt8Set(t *testing.T) {
	bwtesting.BwRunTests(t, Int8SetFrom, map[string]bwtesting.TestCaseStruct{"Int8SetFrom": {
		In: []interface{}{[]int8{_Int8SetTestItemA, _Int8SetTestItemB}},
		Out: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8SetFromSlice, map[string]bwtesting.TestCaseStruct{"Int8SetFromSlice": {
		In: []interface{}{[]int8{_Int8SetTestItemA, _Int8SetTestItemB}},
		Out: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8SetFromSet, map[string]bwtesting.TestCaseStruct{"Int8SetFromSet": {
		In: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}},
		Out: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8Set.Copy, map[string]bwtesting.TestCaseStruct{"Int8Set.Copy": {
		In: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}},
		Out: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8Set.ToSlice, map[string]bwtesting.TestCaseStruct{"Int8Set.ToSlice": {
		In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}},
		Out: []interface{}{[]int8{_Int8SetTestItemA}},
	}})
	bwtesting.BwRunTests(t, _Int8SetToSliceTestHelper, map[string]bwtesting.TestCaseStruct{"_Int8SetToSliceTestHelper": {
		In:  []interface{}{[]int8{_Int8SetTestItemB, _Int8SetTestItemA}},
		Out: []interface{}{[]int8{_Int8SetTestItemA, _Int8SetTestItemB}},
	}})
	bwtesting.BwRunTests(t, Int8Set.String, map[string]bwtesting.TestCaseStruct{"Int8Set.String": {
		In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}},
		Out: []interface{}{bwjson.PrettyJson([]int8{_Int8SetTestItemA})},
	}})
	bwtesting.BwRunTests(t, Int8Set.DataForJson, map[string]bwtesting.TestCaseStruct{"Int8Set.DataForJson": {
		In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{_Int8SetTestItemA}},
	}})
	bwtesting.BwRunTests(t, Int8Set.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"Int8Set.ToSliceOfStrings": {
		In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{strconv.FormatInt(int64(_Int8SetTestItemA), 10)}},
	}})
	bwtesting.BwRunTests(t, Int8Set.Has, map[string]bwtesting.TestCaseStruct{
		"Int8Set.Has: false": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, _Int8SetTestItemB},
			Out: []interface{}{false},
		},
		"Int8Set.Has: true": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, _Int8SetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8Set.HasAny, map[string]bwtesting.TestCaseStruct{
		"Int8Set.HasAny: empty": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, []int8{}},
			Out: []interface{}{false},
		},
		"Int8Set.HasAny: false": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, []int8{_Int8SetTestItemB}},
			Out: []interface{}{false},
		},
		"Int8Set.HasAny: true": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, []int8{_Int8SetTestItemA, _Int8SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8Set.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"Int8Set.HasAnyOfSlice: empty": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, []int8{}},
			Out: []interface{}{false},
		},
		"Int8Set.HasAnyOfSlice: false": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, []int8{_Int8SetTestItemB}},
			Out: []interface{}{false},
		},
		"Int8Set.HasAnyOfSlice: true": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, []int8{_Int8SetTestItemA, _Int8SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8Set.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"Int8Set.HasAnyOfSet: empty": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, Int8Set{}},
			Out: []interface{}{false},
		},
		"Int8Set.HasAnyOfSet: false": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, Int8Set{_Int8SetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"Int8Set.HasAnyOfSet: true": {
			In: []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, Int8Set{
				_Int8SetTestItemA: struct{}{},
				_Int8SetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8Set.HasEach, map[string]bwtesting.TestCaseStruct{
		"Int8Set.HasEach: empty": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, []int8{}},
			Out: []interface{}{true},
		},
		"Int8Set.HasEach: false": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, []int8{_Int8SetTestItemA, _Int8SetTestItemB}},
			Out: []interface{}{false},
		},
		"Int8Set.HasEach: true": {
			In: []interface{}{Int8Set{
				_Int8SetTestItemA: struct{}{},
				_Int8SetTestItemB: struct{}{},
			}, []int8{_Int8SetTestItemA, _Int8SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8Set.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"Int8Set.HasEachOfSlice: empty": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, []int8{}},
			Out: []interface{}{true},
		},
		"Int8Set.HasEachOfSlice: false": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, []int8{_Int8SetTestItemA, _Int8SetTestItemB}},
			Out: []interface{}{false},
		},
		"Int8Set.HasEachOfSlice: true": {
			In: []interface{}{Int8Set{
				_Int8SetTestItemA: struct{}{},
				_Int8SetTestItemB: struct{}{},
			}, []int8{_Int8SetTestItemA, _Int8SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8Set.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"Int8Set.HasEachOfSet: empty": {
			In:  []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, Int8Set{}},
			Out: []interface{}{true},
		},
		"Int8Set.HasEachOfSet: false": {
			In: []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, Int8Set{
				_Int8SetTestItemA: struct{}{},
				_Int8SetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"Int8Set.HasEachOfSet: true": {
			In: []interface{}{Int8Set{
				_Int8SetTestItemA: struct{}{},
				_Int8SetTestItemB: struct{}{},
			}, Int8Set{
				_Int8SetTestItemA: struct{}{},
				_Int8SetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Int8Set._AddTestHelper, map[string]bwtesting.TestCaseStruct{"Int8Set.Add": {
		In: []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, []int8{_Int8SetTestItemB}},
		Out: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8Set._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Int8Set.AddSlice": {
		In: []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, []int8{_Int8SetTestItemB}},
		Out: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8Set._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"Int8Set.AddSet": {
		In: []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, Int8Set{_Int8SetTestItemB: struct{}{}}},
		Out: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8Set._DelTestHelper, map[string]bwtesting.TestCaseStruct{"Int8Set.Del": {
		In: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}, []int8{_Int8SetTestItemB}},
		Out: []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int8Set._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Int8Set.DelSlice": {
		In: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}, []int8{_Int8SetTestItemB}},
		Out: []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int8Set._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"Int8Set.DelSet": {
		In: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}, Int8Set{_Int8SetTestItemB: struct{}{}}},
		Out: []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int8Set.Union, map[string]bwtesting.TestCaseStruct{"Int8Set.Union": {
		In: []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}, Int8Set{_Int8SetTestItemB: struct{}{}}},
		Out: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Int8Set.Intersect, map[string]bwtesting.TestCaseStruct{"Int8Set.Intersect": {
		In: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}, Int8Set{_Int8SetTestItemB: struct{}{}}},
		Out: []interface{}{Int8Set{_Int8SetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Int8Set.Subtract, map[string]bwtesting.TestCaseStruct{"Int8Set.Subtract": {
		In: []interface{}{Int8Set{
			_Int8SetTestItemA: struct{}{},
			_Int8SetTestItemB: struct{}{},
		}, Int8Set{_Int8SetTestItemB: struct{}{}}},
		Out: []interface{}{Int8Set{_Int8SetTestItemA: struct{}{}}},
	}})
}
