// Code generated by "bwsetter -type=uint16"; DO NOT EDIT; bwsetter: go get -type=uint16 -set=Uint16Set -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"strconv"
	"testing"
)

func TestUint16Set(t *testing.T) {
	bwtesting.BwRunTests(t, Uint16SetFrom, map[string]bwtesting.TestCaseStruct{"Uint16SetFrom": {
		In: []interface{}{[]uint16{_Uint16SetTestItemA, _Uint16SetTestItemB}},
		Out: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint16SetFromSlice, map[string]bwtesting.TestCaseStruct{"Uint16SetFromSlice": {
		In: []interface{}{[]uint16{_Uint16SetTestItemA, _Uint16SetTestItemB}},
		Out: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint16SetFromSet, map[string]bwtesting.TestCaseStruct{"Uint16SetFromSet": {
		In: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}},
		Out: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint16Set.Copy, map[string]bwtesting.TestCaseStruct{"Uint16Set.Copy": {
		In: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}},
		Out: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint16Set.ToSlice, map[string]bwtesting.TestCaseStruct{"Uint16Set.ToSlice": {
		In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}},
		Out: []interface{}{[]uint16{_Uint16SetTestItemA}},
	}})
	bwtesting.BwRunTests(t, _Uint16SetToSliceTestHelper, map[string]bwtesting.TestCaseStruct{"_Uint16SetToSliceTestHelper": {
		In:  []interface{}{[]uint16{_Uint16SetTestItemB, _Uint16SetTestItemA}},
		Out: []interface{}{[]uint16{_Uint16SetTestItemA, _Uint16SetTestItemB}},
	}})
	bwtesting.BwRunTests(t, Uint16Set.String, map[string]bwtesting.TestCaseStruct{"Uint16Set.String": {
		In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}},
		Out: []interface{}{bwjson.PrettyJson([]uint16{_Uint16SetTestItemA})},
	}})
	bwtesting.BwRunTests(t, Uint16Set.DataForJson, map[string]bwtesting.TestCaseStruct{"Uint16Set.DataForJson": {
		In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{_Uint16SetTestItemA}},
	}})
	bwtesting.BwRunTests(t, Uint16Set.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"Uint16Set.ToSliceOfStrings": {
		In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{strconv.FormatUint(uint64(_Uint16SetTestItemA), 10)}},
	}})
	bwtesting.BwRunTests(t, Uint16Set.Has, map[string]bwtesting.TestCaseStruct{
		"Uint16Set.Has: false": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, _Uint16SetTestItemB},
			Out: []interface{}{false},
		},
		"Uint16Set.Has: true": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, _Uint16SetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint16Set.HasAny, map[string]bwtesting.TestCaseStruct{
		"Uint16Set.HasAny: empty": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, []uint16{}},
			Out: []interface{}{false},
		},
		"Uint16Set.HasAny: false": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, []uint16{_Uint16SetTestItemB}},
			Out: []interface{}{false},
		},
		"Uint16Set.HasAny: true": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, []uint16{_Uint16SetTestItemA, _Uint16SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint16Set.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"Uint16Set.HasAnyOfSlice: empty": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, []uint16{}},
			Out: []interface{}{false},
		},
		"Uint16Set.HasAnyOfSlice: false": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, []uint16{_Uint16SetTestItemB}},
			Out: []interface{}{false},
		},
		"Uint16Set.HasAnyOfSlice: true": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, []uint16{_Uint16SetTestItemA, _Uint16SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint16Set.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"Uint16Set.HasAnyOfSet: empty": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, Uint16Set{}},
			Out: []interface{}{false},
		},
		"Uint16Set.HasAnyOfSet: false": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, Uint16Set{_Uint16SetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"Uint16Set.HasAnyOfSet: true": {
			In: []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, Uint16Set{
				_Uint16SetTestItemA: struct{}{},
				_Uint16SetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint16Set.HasEach, map[string]bwtesting.TestCaseStruct{
		"Uint16Set.HasEach: empty": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, []uint16{}},
			Out: []interface{}{true},
		},
		"Uint16Set.HasEach: false": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, []uint16{_Uint16SetTestItemA, _Uint16SetTestItemB}},
			Out: []interface{}{false},
		},
		"Uint16Set.HasEach: true": {
			In: []interface{}{Uint16Set{
				_Uint16SetTestItemA: struct{}{},
				_Uint16SetTestItemB: struct{}{},
			}, []uint16{_Uint16SetTestItemA, _Uint16SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint16Set.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"Uint16Set.HasEachOfSlice: empty": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, []uint16{}},
			Out: []interface{}{true},
		},
		"Uint16Set.HasEachOfSlice: false": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, []uint16{_Uint16SetTestItemA, _Uint16SetTestItemB}},
			Out: []interface{}{false},
		},
		"Uint16Set.HasEachOfSlice: true": {
			In: []interface{}{Uint16Set{
				_Uint16SetTestItemA: struct{}{},
				_Uint16SetTestItemB: struct{}{},
			}, []uint16{_Uint16SetTestItemA, _Uint16SetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint16Set.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"Uint16Set.HasEachOfSet: empty": {
			In:  []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, Uint16Set{}},
			Out: []interface{}{true},
		},
		"Uint16Set.HasEachOfSet: false": {
			In: []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, Uint16Set{
				_Uint16SetTestItemA: struct{}{},
				_Uint16SetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"Uint16Set.HasEachOfSet: true": {
			In: []interface{}{Uint16Set{
				_Uint16SetTestItemA: struct{}{},
				_Uint16SetTestItemB: struct{}{},
			}, Uint16Set{
				_Uint16SetTestItemA: struct{}{},
				_Uint16SetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, Uint16Set._AddTestHelper, map[string]bwtesting.TestCaseStruct{"Uint16Set.Add": {
		In: []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, []uint16{_Uint16SetTestItemB}},
		Out: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint16Set._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Uint16Set.AddSlice": {
		In: []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, []uint16{_Uint16SetTestItemB}},
		Out: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint16Set._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"Uint16Set.AddSet": {
		In: []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, Uint16Set{_Uint16SetTestItemB: struct{}{}}},
		Out: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint16Set._DelTestHelper, map[string]bwtesting.TestCaseStruct{"Uint16Set.Del": {
		In: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}, []uint16{_Uint16SetTestItemB}},
		Out: []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Uint16Set._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"Uint16Set.DelSlice": {
		In: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}, []uint16{_Uint16SetTestItemB}},
		Out: []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Uint16Set._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"Uint16Set.DelSet": {
		In: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}, Uint16Set{_Uint16SetTestItemB: struct{}{}}},
		Out: []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Uint16Set.Union, map[string]bwtesting.TestCaseStruct{"Uint16Set.Union": {
		In: []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}, Uint16Set{_Uint16SetTestItemB: struct{}{}}},
		Out: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, Uint16Set.Intersect, map[string]bwtesting.TestCaseStruct{"Uint16Set.Intersect": {
		In: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}, Uint16Set{_Uint16SetTestItemB: struct{}{}}},
		Out: []interface{}{Uint16Set{_Uint16SetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, Uint16Set.Subtract, map[string]bwtesting.TestCaseStruct{"Uint16Set.Subtract": {
		In: []interface{}{Uint16Set{
			_Uint16SetTestItemA: struct{}{},
			_Uint16SetTestItemB: struct{}{},
		}, Uint16Set{_Uint16SetTestItemB: struct{}{}}},
		Out: []interface{}{Uint16Set{_Uint16SetTestItemA: struct{}{}}},
	}})
}
