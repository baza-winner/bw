// Code generated by "setter -type=string"; DO NOT EDIT; setter: go get github.com/baza-winner/bwcore/setter

package bwset

import (
	"fmt"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"testing"
)

func TestStringSet(t *testing.T) {
	bwtesting.BwRunTests(t, StringSetFrom, map[string]bwtesting.TestCaseStruct{"StringSetFrom": {
		In: []interface{}{[]string{_StringSetTestItemA, _StringSetTestItemB}},
		Out: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, StringSetFromSlice, map[string]bwtesting.TestCaseStruct{"StringSetFromSlice": {
		In: []interface{}{[]string{_StringSetTestItemA, _StringSetTestItemB}},
		Out: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, StringSetFromSet, map[string]bwtesting.TestCaseStruct{"StringSetFromSet": {
		In: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}},
		Out: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, StringSet.Copy, map[string]bwtesting.TestCaseStruct{"StringSet.Copy": {
		In: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}},
		Out: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, StringSet.ToSlice, map[string]bwtesting.TestCaseStruct{"StringSet.ToSlice": {
		In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{_StringSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, _StringSetToSliceTestHelper, map[string]bwtesting.TestCaseStruct{"_StringSetToSliceTestHelper": {
		In:  []interface{}{[]string{_StringSetTestItemB, _StringSetTestItemA}},
		Out: []interface{}{[]string{_StringSetTestItemA, _StringSetTestItemB}},
	}})
	bwtesting.BwRunTests(t, StringSet.String, map[string]bwtesting.TestCaseStruct{"StringSet.String": {
		In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}},
		Out: []interface{}{fmt.Sprintf("[\n  %q\n]", _StringSetTestItemA)},
	}})
	bwtesting.BwRunTests(t, StringSet.GetDataForJson, map[string]bwtesting.TestCaseStruct{"StringSet.GetDataForJson": {
		In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{_StringSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, StringSet.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"StringSet.ToSliceOfStrings": {
		In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}},
		Out: []interface{}{[]string{_StringSetTestItemA}},
	}})
	bwtesting.BwRunTests(t, StringSet.Has, map[string]bwtesting.TestCaseStruct{
		"StringSet.Has: false": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, _StringSetTestItemB},
			Out: []interface{}{false},
		},
		"StringSet.Has: true": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, _StringSetTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, StringSet.HasAny, map[string]bwtesting.TestCaseStruct{
		"StringSet.HasAny: empty": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, []string{}},
			Out: []interface{}{false},
		},
		"StringSet.HasAny: false": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, []string{_StringSetTestItemB}},
			Out: []interface{}{false},
		},
		"StringSet.HasAny: true": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, []string{_StringSetTestItemA, _StringSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, StringSet.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"StringSet.HasAnyOfSlice: empty": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, []string{}},
			Out: []interface{}{false},
		},
		"StringSet.HasAnyOfSlice: false": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, []string{_StringSetTestItemB}},
			Out: []interface{}{false},
		},
		"StringSet.HasAnyOfSlice: true": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, []string{_StringSetTestItemA, _StringSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, StringSet.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"StringSet.HasAnyOfSet: empty": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, StringSet{}},
			Out: []interface{}{false},
		},
		"StringSet.HasAnyOfSet: false": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, StringSet{_StringSetTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"StringSet.HasAnyOfSet: true": {
			In: []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, StringSet{
				_StringSetTestItemA: struct{}{},
				_StringSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, StringSet.HasEach, map[string]bwtesting.TestCaseStruct{
		"StringSet.HasEach: empty": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, []string{}},
			Out: []interface{}{true},
		},
		"StringSet.HasEach: false": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, []string{_StringSetTestItemA, _StringSetTestItemB}},
			Out: []interface{}{false},
		},
		"StringSet.HasEach: true": {
			In: []interface{}{StringSet{
				_StringSetTestItemA: struct{}{},
				_StringSetTestItemB: struct{}{},
			}, []string{_StringSetTestItemA, _StringSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, StringSet.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"StringSet.HasEachOfSlice: empty": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, []string{}},
			Out: []interface{}{true},
		},
		"StringSet.HasEachOfSlice: false": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, []string{_StringSetTestItemA, _StringSetTestItemB}},
			Out: []interface{}{false},
		},
		"StringSet.HasEachOfSlice: true": {
			In: []interface{}{StringSet{
				_StringSetTestItemA: struct{}{},
				_StringSetTestItemB: struct{}{},
			}, []string{_StringSetTestItemA, _StringSetTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, StringSet.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"StringSet.HasEachOfSet: empty": {
			In:  []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, StringSet{}},
			Out: []interface{}{true},
		},
		"StringSet.HasEachOfSet: false": {
			In: []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, StringSet{
				_StringSetTestItemA: struct{}{},
				_StringSetTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"StringSet.HasEachOfSet: true": {
			In: []interface{}{StringSet{
				_StringSetTestItemA: struct{}{},
				_StringSetTestItemB: struct{}{},
			}, StringSet{
				_StringSetTestItemA: struct{}{},
				_StringSetTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, StringSet._AddTestHelper, map[string]bwtesting.TestCaseStruct{"StringSet.Add": {
		In: []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, []string{_StringSetTestItemB}},
		Out: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, StringSet._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"StringSet.AddSlice": {
		In: []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, []string{_StringSetTestItemB}},
		Out: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, StringSet._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"StringSet.AddSet": {
		In: []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, StringSet{_StringSetTestItemB: struct{}{}}},
		Out: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, StringSet._DelTestHelper, map[string]bwtesting.TestCaseStruct{"StringSet.Del": {
		In: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}, []string{_StringSetTestItemB}},
		Out: []interface{}{StringSet{_StringSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, StringSet._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"StringSet.DelSlice": {
		In: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}, []string{_StringSetTestItemB}},
		Out: []interface{}{StringSet{_StringSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, StringSet._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"StringSet.DelSet": {
		In: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}, StringSet{_StringSetTestItemB: struct{}{}}},
		Out: []interface{}{StringSet{_StringSetTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, StringSet.Union, map[string]bwtesting.TestCaseStruct{"StringSet.Union": {
		In: []interface{}{StringSet{_StringSetTestItemA: struct{}{}}, StringSet{_StringSetTestItemB: struct{}{}}},
		Out: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, StringSet.Intersect, map[string]bwtesting.TestCaseStruct{"StringSet.Intersect": {
		In: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}, StringSet{_StringSetTestItemB: struct{}{}}},
		Out: []interface{}{StringSet{_StringSetTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, StringSet.Subtract, map[string]bwtesting.TestCaseStruct{"StringSet.Subtract": {
		In: []interface{}{StringSet{
			_StringSetTestItemA: struct{}{},
			_StringSetTestItemB: struct{}{},
		}, StringSet{_StringSetTestItemB: struct{}{}}},
		Out: []interface{}{StringSet{_StringSetTestItemA: struct{}{}}},
	}})
}
