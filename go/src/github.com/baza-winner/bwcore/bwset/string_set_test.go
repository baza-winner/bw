// Code generated by "bwsetter -type=string"; DO NOT EDIT; bwsetter: go get -type=string -set=String -test%!(EXTRA string=github.com/baza-winner/bwcore/bwsetter)

package bwset

import (
	bwjson "github.com/baza-winner/bwcore/bwjson"
	bwtesting "github.com/baza-winner/bwcore/bwtesting"
	"testing"
)

func TestString(t *testing.T) {
	bwtesting.BwRunTests(t, StringFrom, map[string]bwtesting.TestCaseStruct{"StringFrom": {
		In: []interface{}{[]string{_StringTestItemA, _StringTestItemB}},
		Out: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, StringFromSlice, map[string]bwtesting.TestCaseStruct{"StringFromSlice": {
		In: []interface{}{[]string{_StringTestItemA, _StringTestItemB}},
		Out: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, StringFromSet, map[string]bwtesting.TestCaseStruct{"StringFromSet": {
		In: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}},
		Out: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, String.Copy, map[string]bwtesting.TestCaseStruct{"String.Copy": {
		In: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}},
		Out: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, String.ToSlice, map[string]bwtesting.TestCaseStruct{"String.ToSlice": {
		In:  []interface{}{String{_StringTestItemA: struct{}{}}},
		Out: []interface{}{[]string{_StringTestItemA}},
	}})
	bwtesting.BwRunTests(t, _StringToSliceTestHelper, map[string]bwtesting.TestCaseStruct{"_StringToSliceTestHelper": {
		In:  []interface{}{[]string{_StringTestItemB, _StringTestItemA}},
		Out: []interface{}{[]string{_StringTestItemA, _StringTestItemB}},
	}})
	bwtesting.BwRunTests(t, String.String, map[string]bwtesting.TestCaseStruct{"String.String": {
		In:  []interface{}{String{_StringTestItemA: struct{}{}}},
		Out: []interface{}{bwjson.PrettyJson([]string{_StringTestItemA})},
	}})
	bwtesting.BwRunTests(t, String.DataForJSON, map[string]bwtesting.TestCaseStruct{"String.DataForJSON": {
		In:  []interface{}{String{_StringTestItemA: struct{}{}}},
		Out: []interface{}{[]interface{}{_StringTestItemA}},
	}})
	bwtesting.BwRunTests(t, String.ToSliceOfStrings, map[string]bwtesting.TestCaseStruct{"String.ToSliceOfStrings": {
		In:  []interface{}{String{_StringTestItemA: struct{}{}}},
		Out: []interface{}{[]string{_StringTestItemA}},
	}})
	bwtesting.BwRunTests(t, String.Has, map[string]bwtesting.TestCaseStruct{
		"String.Has: false": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, _StringTestItemB},
			Out: []interface{}{false},
		},
		"String.Has: true": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, _StringTestItemA},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, String.HasAny, map[string]bwtesting.TestCaseStruct{
		"String.HasAny: empty": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, []string{}},
			Out: []interface{}{false},
		},
		"String.HasAny: false": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, []string{_StringTestItemB}},
			Out: []interface{}{false},
		},
		"String.HasAny: true": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, []string{_StringTestItemA, _StringTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, String.HasAnyOfSlice, map[string]bwtesting.TestCaseStruct{
		"String.HasAnyOfSlice: empty": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, []string{}},
			Out: []interface{}{false},
		},
		"String.HasAnyOfSlice: false": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, []string{_StringTestItemB}},
			Out: []interface{}{false},
		},
		"String.HasAnyOfSlice: true": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, []string{_StringTestItemA, _StringTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, String.HasAnyOfSet, map[string]bwtesting.TestCaseStruct{
		"String.HasAnyOfSet: empty": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, String{}},
			Out: []interface{}{false},
		},
		"String.HasAnyOfSet: false": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, String{_StringTestItemB: struct{}{}}},
			Out: []interface{}{false},
		},
		"String.HasAnyOfSet: true": {
			In: []interface{}{String{_StringTestItemA: struct{}{}}, String{
				_StringTestItemA: struct{}{},
				_StringTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, String.HasEach, map[string]bwtesting.TestCaseStruct{
		"String.HasEach: empty": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, []string{}},
			Out: []interface{}{true},
		},
		"String.HasEach: false": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, []string{_StringTestItemA, _StringTestItemB}},
			Out: []interface{}{false},
		},
		"String.HasEach: true": {
			In: []interface{}{String{
				_StringTestItemA: struct{}{},
				_StringTestItemB: struct{}{},
			}, []string{_StringTestItemA, _StringTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, String.HasEachOfSlice, map[string]bwtesting.TestCaseStruct{
		"String.HasEachOfSlice: empty": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, []string{}},
			Out: []interface{}{true},
		},
		"String.HasEachOfSlice: false": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, []string{_StringTestItemA, _StringTestItemB}},
			Out: []interface{}{false},
		},
		"String.HasEachOfSlice: true": {
			In: []interface{}{String{
				_StringTestItemA: struct{}{},
				_StringTestItemB: struct{}{},
			}, []string{_StringTestItemA, _StringTestItemB}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, String.HasEachOfSet, map[string]bwtesting.TestCaseStruct{
		"String.HasEachOfSet: empty": {
			In:  []interface{}{String{_StringTestItemA: struct{}{}}, String{}},
			Out: []interface{}{true},
		},
		"String.HasEachOfSet: false": {
			In: []interface{}{String{_StringTestItemA: struct{}{}}, String{
				_StringTestItemA: struct{}{},
				_StringTestItemB: struct{}{},
			}},
			Out: []interface{}{false},
		},
		"String.HasEachOfSet: true": {
			In: []interface{}{String{
				_StringTestItemA: struct{}{},
				_StringTestItemB: struct{}{},
			}, String{
				_StringTestItemA: struct{}{},
				_StringTestItemB: struct{}{},
			}},
			Out: []interface{}{true},
		},
	})
	bwtesting.BwRunTests(t, String._AddTestHelper, map[string]bwtesting.TestCaseStruct{"String.Add": {
		In: []interface{}{String{_StringTestItemA: struct{}{}}, []string{_StringTestItemB}},
		Out: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, String._AddSliceTestHelper, map[string]bwtesting.TestCaseStruct{"String.AddSlice": {
		In: []interface{}{String{_StringTestItemA: struct{}{}}, []string{_StringTestItemB}},
		Out: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, String._AddSetTestHelper, map[string]bwtesting.TestCaseStruct{"String.AddSet": {
		In: []interface{}{String{_StringTestItemA: struct{}{}}, String{_StringTestItemB: struct{}{}}},
		Out: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, String._DelTestHelper, map[string]bwtesting.TestCaseStruct{"String.Del": {
		In: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}, []string{_StringTestItemB}},
		Out: []interface{}{String{_StringTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, String._DelSliceTestHelper, map[string]bwtesting.TestCaseStruct{"String.DelSlice": {
		In: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}, []string{_StringTestItemB}},
		Out: []interface{}{String{_StringTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, String._DelSetTestHelper, map[string]bwtesting.TestCaseStruct{"String.DelSet": {
		In: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}, String{_StringTestItemB: struct{}{}}},
		Out: []interface{}{String{_StringTestItemA: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, String.Union, map[string]bwtesting.TestCaseStruct{"String.Union": {
		In: []interface{}{String{_StringTestItemA: struct{}{}}, String{_StringTestItemB: struct{}{}}},
		Out: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}},
	}})
	bwtesting.BwRunTests(t, String.Intersect, map[string]bwtesting.TestCaseStruct{"String.Intersect": {
		In: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}, String{_StringTestItemB: struct{}{}}},
		Out: []interface{}{String{_StringTestItemB: struct{}{}}},
	}})
	bwtesting.BwRunTests(t, String.Subtract, map[string]bwtesting.TestCaseStruct{"String.Subtract": {
		In: []interface{}{String{
			_StringTestItemA: struct{}{},
			_StringTestItemB: struct{}{},
		}, String{_StringTestItemB: struct{}{}}},
		Out: []interface{}{String{_StringTestItemA: struct{}{}}},
	}})
}
